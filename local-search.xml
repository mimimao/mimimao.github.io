<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>文案写作模版</title>
    <link href="/2023/04/25/%E6%96%87%E6%A1%88%E5%86%99%E4%BD%9C%E6%A8%A1%E7%89%88/"/>
    <url>/2023/04/25/%E6%96%87%E6%A1%88%E5%86%99%E4%BD%9C%E6%A8%A1%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="文案写作模版"><a href="#文案写作模版" class="headerlink" title="文案写作模版"></a>文案写作模版</h1><h2 id="市场营销"><a href="#市场营销" class="headerlink" title="市场营销"></a>市场营销</h2><ol><li>选题脑暴–脑洞大开,灵感无限<br><code>公司名称</code>推出的产品<code>产品名称</code>，其中的特点是<code>产品特点</code>，请依据以上信息,从不同角度提供广告的创意灵感</li><li>用户痛点–头脑风暴,开启痛点猎手模式<br>头脑风暴一下，目标用户<code>目标用户</code>在达成目标<code>目标</code>的过程中,有哪些痛点和需求</li><li>品牌简介 –品牌不凡,别具风采<br>请帮成立于<code>年份</code>年，服务于<code>行业或领域</code>的<code>公司品牌名称</code>，写一份引人入胜的品牌介绍</li><li>视频广告脚本–点亮你的广告,释放创意能量<br>这是产品的相关介绍<code>产品介绍</code>，面向的用户群体是<code>目标受众</code>，以短视频方式进行广告展示,请生成一个视频广告脚本,吸引用户观看。</li><li>甲方brief—一份Brief,启动创意之旅<br>请根据<code>品牌/产品信息与介绍</code>本次营销的目标受众群体<code>目标客户的年龄、性别、地理位置、收入和兴趣</code>，项目的<code>预算和时间</code>，提供一篇对接创意供应商的brief文案。</li><li>产品slogan–创造潮流,从产品slogan开始<br>这是产品的相关介绍<code>产品介绍</code>，请生成个性化的口号标语</li><li>新闻稿–秒速完成,瞬间发布<br>我希望给<code>主题</code>写一篇新闻稿，主要包含的内容<code>详细信息</code></li><li>商品亮点–好物来袭,多角度亮点解析<br>根据<code>商品名称</code>的<code>关键特点</code>，从多个角度写一段突出商品亮点的介绍</li><li>产品名称–取名游刃有余,产品畅销不停<br>这是产品的相关介绍<code>产品介绍</code>，其中突出的关键点是<code>关键信息点</code>，请提供一些产品名字的灵感</li><li>商品简介–妙笔生花,让商品绽放不凡<br>  根据<code>商品名称</code>的<code>关键特点</code>，写一段商品的介绍，可以在各大电商平台上使用</li><li>告标语–创意卖点,轻松打动客户<br>  这款产品的名字是<code>产品名称</code>，其中突出的特点是<code>产品特点</code>，请依据以上信息，提供一些有创意的广告标语</li><li>广告文案–广告创意飙升,炫出灵感火花<br>  这是产品的相关介绍<code>产品介绍</code>，其中突出的关键点是<code>关键信息点</code>，广告的投放平台是<code>平台或渠道</code>，请撰写<code>数量</code>条富有创意且能实现有效转化的广告标题及描述</li><li>产品卖点罗列–挖掘产品卖点,解锁无限商机<br>  根据<code>商品名称</code>的关<code>键特点</code>，提炼产品突出的卖点</li><li>商品核心价值–一句话,尽得商品精华<br>  根据<code>商品名称</code>的<code>关键特点</code>，提炼成一句话，可以综合表现出商品的核心价值</li><li>商品优质评价—仿真百分百,评价更优质真实<br>  根据<code>商品名称</code>的<code>关键特点</code>，写一段用户购买后的真实使用评价</li><li>引导购–用文案的魔法,点亮购物热情<br>  目前希望向<code>目标用户</code>售卖<code>产品名称</code>，希望提供一段话术引导用户来购买</li><li>引起注意–引发用户好奇心,从这里开始<br>  目前希望向<code>目标用户</code>售卖<code>产品名称</code>，希望提供一段话术引导用户来查看</li><li>工作任务拆解–轻松进行任务分解,工作高效有序<br>  我接到的关于<code>需求详情</code>的需求，请帮我拆解出我下一步的任务项，以todo list的形式呈现</li></ol><h2 id="新媒体"><a href="#新媒体" class="headerlink" title="新媒体"></a>新媒体</h2><ol><li>文章标题–用标题点亮读者的好奇心<br>根据以下内容<code>文章内容</code>，写一个吸引人的标题</li><li>文章大纲–大纲有序,文章井然<br>我在写关于<code>文章关键词</code>的文章，但没有太多思路，请提供文章的篇章结构与大纲</li><li>文章开篇段落–醒目开篇,马上开启阅读<br>我在写关于<code>文章主题</code>的文章，主要围绕<code>关键词</code>进行展开叙述，但没有太多思路，请根据以上信息，写一段引人入胜的开篇段落</li><li>段落内容生成–赢得读者第一眼<br>我在写关于<code>文章主题</code>的文章，主要围绕<code>关键词</code>进行展开叙述，但没有太多灵感，请根据以上信息，写一段吸引人阅读的段落</li><li>文章结尾段落–善用点睛之笔,成就完美作品<br>我在写关于<code>文章主题</code>的文章，主要围绕<code>关键词</code>进行展开叙述，但不知道怎么来总结收尾，请根据以上信息，写一段画龙点睛的结尾</li><li>小红书标题–提炼标题,让你的文章不再默默无闻<br>这是一篇小红书的笔记<code>笔记内容</code>和<code>关键要点</code>，以此提炼出一个具有点击吸引力的标题</li><li>小红书种草文案—每个人都可以成为小红书种草达人<br>写一篇小红书的种草文案关于<code>商品名称</code>，他的主要包括以下几方面特点<code>关键点描述</code></li><li>短视频灵感—让灵感点燃你的创意火花<br>我正在拍摄关于<code>视频主题</code>的视频，主要围绕<code>视频关键内容</code>进行展开，但没有太多灵感，请提供一些有创意和新奇的想法</li><li>短视频大纲–新颖脚本大纲来袭<br>我正在拍摄关于<code>视频主题</code>的视频，主要围绕<code>视频关键内容</code>进行展开，但没有太多思路，请提供一些新颖的脚本大纲</li><li>短视频标题–不要让无聊的标题拖垮你的视频<br>  我正在拍摄关于<code>视频主题</code>的视频，主要围绕<code>视频关键内容</code>进行展开，请写一个有吸引力的标题</li><li>短视频介绍–脱颖而出的视频介绍,<br>  我正在拍摄关于<code>视频主题</code>的视频，主要围绕<code>视频关键内容</code>进行展开，请写一段关于这个主题的介绍，吸引观众来观看视频</li><li>短视频开头–拍摄从”头”开始,用创意点亮第一眼<br>  我正在拍摄关于<code>视频主题</code>的视频，主要围绕<code>视频关键内容</code>进行展开，但没有太多思路，请提供一些吸引人观看的视频开头设计</li><li>短视频分镜—不浪费每一个角度,创意分镜助你打造震撼大片<br>  我正在拍摄关于<code>视频主题</code>的的视频，预期镜头数为<code>数字</code>，但没有太多思路，请提供一些有创意的分镜灵感</li><li>短视频口播文案–一段好口播,让你的短视频瞬间脱颖而出<br>  我正在拍摄关于<code>视频主题</code>的视频，主要围绕<code>视频关键内容</code>进行展开，请写一段吸引人观看的口播文案</li><li>新媒体账号取名–走心创意名字,点亮账号个性<br>  我正在<code>平台名称</code>申请一个账号，账号的主要特点和定位是<code>具体特点描述</code>，我希望账号的名字比较有创意，请帮我提供<code>数量</code>个灵感吧</li><li>新媒体账号简介–吸睛有妙招,让用户快速关注<br>  我在运营一个新媒体账号<code>账号名称</code>，主要面向的<code>目标用户</code>，主要特点和定位是<code>具体特点描述</code>，希望可以帮忙写一篇引人入胜的简介，吸引用户来关注。简介中可以着重描述以下<code>关键信息</code></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>      我正在拍摄关于父母的亚细亚，孩子的卓悦城为主题的亚细亚卓悦城宣传视频，主要围绕亚细亚卓悦城是商场，预计8月6号开业，我们需要在宣传片中体现：星期天哪里去，郑州亚细亚的广告语。希望通过父亲和在读大学生的女儿灵魂互换的表现形式，彼此对对方年轻时代的潮流及创新有共鸣，同时深化父母与孩子的情感，然后凸出亚细亚卓悦城这个商场是搭建两代人的情感纽带的平台进行展开，但没有太多思路，请提供一些新颖的脚本大纲</p><p>      我正在拍摄关于亚细亚卓悦城的宣传视频视频，主要围绕父母的亚细亚，孩子的卓悦城为主题，亚细亚卓悦城是商场，预计8月6号开业，我们需要在宣传片中体现：星期天哪里去，郑州亚细亚的广告语。希望通过父亲和在读大学生的女儿灵魂互换的表现形式，彼此对对方年轻时代的潮流及创新有共鸣，同时深化父母与孩子的情感，然后凸出亚细亚卓悦城这个商场是搭建两代人的情感纽带的平台进行展开，但没有太多思路，请提供一些新颖的脚本大纲</p>]]></content>
    
    
    <categories>
      
      <category>chatgpt</category>
      
      <category>文案写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chatgpt</tag>
      
      <tag>prompts</tag>
      
      <tag>文案写作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端代码规范</title>
    <link href="/2023/04/25/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <url>/2023/04/25/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="前端代码规范"><a href="#前端代码规范" class="headerlink" title="前端代码规范"></a>前端代码规范</h1><p>Front Standard Guide</p><h1 id="前端-JS-项目开发规范"><a href="#前端-JS-项目开发规范" class="headerlink" title="前端 JS 项目开发规范"></a>前端 JS 项目开发规范</h1><p>规范的目的是为了编写高质量的代码，让你的团队成员每天得心情都是愉悦的，大家在一起是快乐的。</p><p>引自《阿里规约》的开头片段：</p><p><em>—-现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶。对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。</em></p><h1 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h1><h3 id="一-命名规范"><a href="#一-命名规范" class="headerlink" title="(一)命名规范"></a>(一)命名规范</h3><h4 id="1-1-1-项目命名"><a href="#1-1-1-项目命名" class="headerlink" title="1.1.1 项目命名"></a>1.1.1 项目命名</h4><p>全部采用小写方式， 以中划线分隔。</p><p>正例：<code>mall-management-system</code></p><p>反例：<code>mall_management-system / mallManagementSystem</code></p><h4 id="1-1-2-目录命名"><a href="#1-1-2-目录命名" class="headerlink" title="1.1.2 目录命名"></a>1.1.2 目录命名</h4><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数</p><p>正例： <code>scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc</code></p><p>反例： <code>script / style / demo_scripts / demoStyles / imgs / docs</code></p><p>【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名</p><p>正例： <code>head-search / page-loading / authorized / notice-icon</code></p><p>反例： <code>HeadSearch / PageLoading</code></p><p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名<br>正例： <code>page-one / shopping-car / user-management</code></p><p>反例： <code>ShoppingCar / UserManagement</code></p><h4 id="1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名"><a href="#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名" class="headerlink" title="1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h4><p>全部采用小写方式， 以中划线分隔</p><p>正例： <code>render-dom.js / signup.css / index.html / company-logo.png</code></p><p>反例： <code>renderDom.js / UserManagement.html</code></p><h4 id="1-1-4-命名严谨性"><a href="#1-1-4-命名严谨性" class="headerlink" title="1.1.4 命名严谨性"></a>1.1.4 命名严谨性</h4><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用</p><p>正例：<code>henan / luoyang / rmb 等国际通用的名称，可视同英文。</code></p><p>反例：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p><p><strong>杜绝完全不规范的缩写，避免望文不知义：</strong></p><p>反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p><h3 id="二-HTML-规范-（Vue-Template-同样适用）"><a href="#二-HTML-规范-（Vue-Template-同样适用）" class="headerlink" title="(二)HTML 规范 （Vue Template 同样适用）"></a>(二)HTML 规范 （Vue Template 同样适用）</h3><h4 id="1-2-1-HTML-类型"><a href="#1-2-1-HTML-类型" class="headerlink" title="1.2.1 HTML 类型"></a>1.2.1 HTML 类型</h4><p>推荐使用 HTML5 的文档类型申明： .<br>（建议使用 text&#x2F;html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application&#x2F;xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。</p><ul><li>规定字符编码</li><li>IE 兼容模式</li><li>规定字符编码</li><li>doctype 大写</li></ul><p>正例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=Edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Page title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/company-logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Company&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-2-缩进"><a href="#1-2-2-缩进" class="headerlink" title="1.2.2 缩进"></a>1.2.2 缩进</h4><p>缩进使用 2 个空格（一个 tab）</p><p>嵌套的节点应该缩进。</p><h4 id="1-2-3-分块注释"><a href="#1-2-3-分块注释" class="headerlink" title="1.2.3 分块注释"></a>1.2.3 分块注释</h4><p>在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式</p><!-- 英文 中文 start ><!-- 英文 中文 end >正例：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- header 头部 start --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 图片会把a标签给撑开，所以不用设置a标签的大小 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/header.jpg&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- header 头部 end --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-4-语义化标签"><a href="#1-2-4-语义化标签" class="headerlink" title="1.2.4 语义化标签"></a>1.2.4 语义化标签</h3><p>HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签</p><p>正例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;header&gt;</span><span class="hljs-section">&lt;/header&gt;</span><br><span class="hljs-section">&lt;footer&gt;</span><span class="hljs-section">&lt;/footer&gt;</span><br></code></pre></td></tr></table></figure><p>反例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><br>  <span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-5-引号"><a href="#1-2-5-引号" class="headerlink" title="1.2.5 引号"></a>1.2.5 引号</h4><p>使用双引号(“ “) 而不是单引号(’ ‘) 。</p><p>正例： <code>&lt;div class=&quot;news-div&quot;&gt;&lt;/div&gt;</code></p><p>反例： <code>&lt;div class=&#39;news-div&#39;&gt;&lt;/div&gt;</code></p><h3 id="三-CSS-规范"><a href="#三-CSS-规范" class="headerlink" title="(三) CSS 规范"></a>(三) CSS 规范</h3><h4 id="1-3-1-命名"><a href="#1-3-1-命名" class="headerlink" title="1.3.1 命名"></a>1.3.1 命名</h4><ul><li>类名使用小写字母，以中划线分隔</li><li>id 采用驼峰式命名</li><li>scss 中的变量、函数、混合、placeholder 采用驼峰式命名</li></ul><p>ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称</p><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fw-800</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">800</span>;<br>&#125;<br><br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.heavy</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">800</span>;<br>&#125;<br><br><span class="hljs-selector-class">.important</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-选择器"><a href="#1-3-2-选择器" class="headerlink" title="1.3.2 选择器"></a>1.3.2 选择器</h4><p>1)css 选择器中避免使用标签名<br>从结构、表现、行为分离的原则来看，应该尽量避免 css 中出现 HTML 标签，并且在 css 选择器中出现标签名会存在潜在的问题。</p><p>2)很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。</p><p>不推荐:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.<span class="hljs-built_in">content</span> .<span class="hljs-built_in">title</span> &#123;<br>  <span class="hljs-built_in">font</span>-size: 2<span class="hljs-built_in">rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.<span class="hljs-built_in">content</span> &gt; .<span class="hljs-built_in">title</span> &#123;<br>  <span class="hljs-built_in">font</span>-size: 2<span class="hljs-built_in">rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-3-尽量使用缩写属性"><a href="#1-3-3-尽量使用缩写属性" class="headerlink" title="1.3.3 尽量使用缩写属性"></a>1.3.3 尽量使用缩写属性</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-top-style</span>: none;<br><span class="hljs-attribute">font-family</span>: palatino, georgia, serif;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.6</span>;<br><span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">2em</span>;<br><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1em</span>;<br><span class="hljs-attribute">padding-right</span>: <span class="hljs-number">1em</span>;<br><span class="hljs-attribute">padding-top</span>: <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">border</span>-top: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">font</span>: <span class="hljs-number">100</span>%/<span class="hljs-number">1</span>.<span class="hljs-number">6</span> palatino, georgia, serif;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1</span>em <span class="hljs-number">2</span>em;<br></code></pre></td></tr></table></figure><h4 id="1-3-4-每个选择器及属性独占一行"><a href="#1-3-4-每个选择器及属性独占一行" class="headerlink" title="1.3.4 每个选择器及属性独占一行"></a>1.3.4 每个选择器及属性独占一行</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#00a0e9</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background</span>:<span class="hljs-number">#00a0e9</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-5-省略0后面的单位"><a href="#1-3-5-省略0后面的单位" class="headerlink" title="1.3.5 省略0后面的单位"></a>1.3.5 省略0后面的单位</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-6-避免使用ID选择器及全局标签选择器防止污染全局样式"><a href="#1-3-6-避免使用ID选择器及全局标签选择器防止污染全局样式" class="headerlink" title="1.3.6 避免使用ID选择器及全局标签选择器防止污染全局样式"></a>1.3.6 避免使用ID选择器及全局标签选择器防止污染全局样式</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span>&#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.header</span>&#123;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四-LESS-规范"><a href="#四-LESS-规范" class="headerlink" title="(四) LESS 规范"></a>(四) LESS 规范</h3><h4 id="1-4-1-代码组织"><a href="#1-4-1-代码组织" class="headerlink" title="1.4.1 代码组织"></a>1.4.1 代码组织</h4><h5 id="1-将公共less文件放置在style-x2F-less-x2F-common文件夹"><a href="#1-将公共less文件放置在style-x2F-less-x2F-common文件夹" class="headerlink" title="1)将公共less文件放置在style&#x2F;less&#x2F;common文件夹"></a>1)将公共less文件放置在style&#x2F;less&#x2F;common文件夹</h5><p>例:&#x2F;&#x2F; color.less,common.less</p><h5 id="2-按以下顺序组织"><a href="#2-按以下顺序组织" class="headerlink" title="2)按以下顺序组织"></a>2)按以下顺序组织</h5><p>1、@import;<br>2、变量声明;<br>3、样式声明;</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;mixins/size.less&quot;</span>;<br><br><span class="hljs-variable">@default-text-color:</span> <span class="hljs-number">#333</span>;<br><br><span class="hljs-selector-class">.page</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">960px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-避免嵌套层级过多"><a href="#1-4-2-避免嵌套层级过多" class="headerlink" title="1.4.2 避免嵌套层级过多"></a>1.4.2 避免嵌套层级过多</h4><p>将嵌套深度限制在3级。对于超过4级的嵌套，给予重新评估。这可以避免出现过于详实的CSS选择器。<br>避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于20行的嵌套规则出现</p><p>不推荐：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.main</span>&#123;<br>  <span class="hljs-string">.title</span>&#123;<br>    <span class="hljs-string">.name</span>&#123;<br>       color:<span class="hljs-comment">#fff</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.main-title</span>&#123;<br>   <span class="hljs-selector-class">.name</span>&#123;<br>      <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五-Javascript-规范"><a href="#五-Javascript-规范" class="headerlink" title="(五) Javascript 规范"></a>(五) Javascript 规范</h3><h4 id="1-5-1-命名"><a href="#1-5-1-命名" class="headerlink" title="1.5.1 命名"></a>1.5.1 命名</h4><h5 id="1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"><a href="#1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束" class="headerlink" title="1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"></a>1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束</h5><p>反例： <code>_name / name_ / name$</code></p><h5 id="2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。"><a href="#2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。" class="headerlink" title="2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。"></a>2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</h5><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p><p>*<em><strong>其中 method 方法命名必须是 动词 或者 动词+名词 形式*</strong></em></p><p>正例：<code>saveShopCarData /openShopCarInfoDialog</code></p><p>反例：<code>save / open / show / go</code></p><p>*<em><strong>特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）*</strong></em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">add <span class="hljs-regexp">/ update /</span> <span class="hljs-keyword">delete</span> <span class="hljs-regexp">/ detail /</span> get<br></code></pre></td></tr></table></figure><p><strong>附： 函数方法常用的动词:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">get 获取/set 设置,<br>add 增加/remove 删除<br>create 创建/destory 移除<br>start 启动/stop 停止<br>open 打开/close 关闭,<br><span class="hljs-built_in">read</span> 读取/write 写入<br>load 载入/save 保存,<br>create 创建/destroy 销毁<br>begin 开始/end 结束,<br>backup 备份/restore 恢复<br>import 导入/export 导出,<br><span class="hljs-built_in">split</span> 分割/merge 合并<br>inject 注入/extract 提取,<br>attach 附着/detach 脱离<br><span class="hljs-built_in">bind</span> 绑定/separate 分离,<br>view 查看/browse 浏览<br>edit 编辑/modify 修改,<br>select 选取/mark 标记<br>copy 复制/paste 粘贴,<br>undo 撤销/redo 重做<br>insert 插入/delete 移除,<br>add 加入/append 添加<br>clean 清理/clear 清除,<br>index 索引/sort 排序<br>find 查找/search 搜索,<br>increase 增加/decrease 减少<br>play 播放/pause 暂停,<br>launch 启动/run 运行<br>compile 编译/execute 执行,<br>debug 调试/trace 跟踪<br>observe 观察/listen 监听,<br>build 构建/publish 发布<br>input 输入/output 输出,<br>encode 编码/decode 解码<br>encrypt 加密/decrypt 解密,<br>compress 压缩/decompress 解压缩<br>pack 打包/unpack 解包,<br>parse 解析/emit 生成<br>connect 连接/disconnect 断开,<br>send 发送/receive 接收<br>download 下载/upload 上传,<br>refresh 刷新/synchronize 同步<br>update 更新/revert 复原,<br>lock 锁定/unlock 解锁<br>check out 签出/check <span class="hljs-keyword">in</span> 签入,<br>submit 提交/commit 交付<br>push 推/pull 拉,<br><span class="hljs-built_in">expand</span> 展开/collapse 折叠<br>begin 起始/end 结束,<br>start 开始/finish 完成<br>enter 进入/exit 退出,<br>abort 放弃/quit 离开<br>obsolete 废弃/depreciate 废旧,<br>collect 收集/aggregate 聚集<br></code></pre></td></tr></table></figure><h5 id="3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"><a href="#3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。" class="headerlink" title="3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"></a>3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</h5><p>正例： <code>MAX_STOCK_COUNT</code></p><p>反例： <code>MAX_COUNT</code></p><h4 id="1-5-2-代码格式"><a href="#1-5-2-代码格式" class="headerlink" title="1.5.2 代码格式"></a>1.5.2 代码格式</h4><h5 id="1-使用-2-个空格进行缩进"><a href="#1-使用-2-个空格进行缩进" class="headerlink" title="1) 使用 2 个空格进行缩进"></a>1) 使用 2 个空格进行缩进</h5><p>正例：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">if (<span class="hljs-keyword">x</span> &lt; y) &#123;<br>  <span class="hljs-keyword">x</span> +<span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>&#125; else &#123;<br>  <span class="hljs-keyword">x</span> +<span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。"><a href="#2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。" class="headerlink" title="2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。"></a>2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</h5><blockquote><p>说明：任何情形，没有必要插入多个空行进行隔开。</p></blockquote><h4 id="1-5-3-字符串"><a href="#1-5-3-字符串" class="headerlink" title="1.5.3 字符串"></a>1.5.3 字符串</h4><p>统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处：</p><p>正例:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">let str</span> = <span class="hljs-string">&#x27;foo&#x27;</span>;<br><span class="hljs-attribute">let testDiv</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>反例:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">let str</span> = <span class="hljs-string">&#x27;foo&#x27;</span>;<br><span class="hljs-attribute">let testDiv</span> = <span class="hljs-string">&quot;&lt;div id=&#x27;test&#x27;&gt;&lt;/div&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="1-5-4-对象声明"><a href="#1-5-4-对象声明" class="headerlink" title="1.5.4 对象声明"></a>1.5.4 对象声明</h4><h5 id="1-使用字面值创建对象"><a href="#1-使用字面值创建对象" class="headerlink" title="1)使用字面值创建对象"></a>1)使用字面值创建对象</h5><p>正例： <code>let user = &#123;&#125;;</code></p><p>反例： <code>let user = new Object();</code></p><h5 id="2-使用字面量来代替对象构造器"><a href="#2-使用字面量来代替对象构造器" class="headerlink" title="2) 使用字面量来代替对象构造器"></a>2) 使用字面量来代替对象构造器</h5><p>正例：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">var <span class="hljs-keyword">user</span> <span class="hljs-title">= &#123;</span><br><span class="hljs-title">  age</span>: <span class="hljs-number">0</span>,<br>  name: <span class="hljs-number">1</span>,<br>  city: <span class="hljs-number">3</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var user <span class="hljs-operator">=</span> new Object()<span class="hljs-comment">;</span><br>user.age <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>user.name <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>user.city <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="1-5-5-使用-ES6-7"><a href="#1-5-5-使用-ES6-7" class="headerlink" title="1.5.5 使用 ES6,7"></a>1.5.5 使用 ES6,7</h4><p>必须优先使用 ES6,7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p><blockquote><p>必须强制使用 ES6, ES7 的新语法，比如箭头函数、await&#x2F;async ， 解构， let ， for…of 等等</p></blockquote><h4 id="1-5-6-括号"><a href="#1-5-6-括号" class="headerlink" title="1.5.6 括号"></a>1.5.6 括号</h4><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。</p><p>正例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">if (condition) &#123;<br>  <span class="hljs-built_in">doSomething</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">if (condition) <span class="hljs-built_in">doSomething</span>();<br></code></pre></td></tr></table></figure><h4 id="1-5-7-undefined-判断"><a href="#1-5-7-undefined-判断" class="headerlink" title="1.5.7 undefined 判断"></a>1.5.7 undefined 判断</h4><p>永远不要直接使用 undefined 进行变量判断；使用 typeof 和字符串’undefined’对变量进行判断。</p><p>正例：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> person === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">if (person <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> undefined) &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-5-8-条件判断和循环最多三层"><a href="#1-5-8-条件判断和循环最多三层" class="headerlink" title="1.5.8 条件判断和循环最多三层"></a>1.5.8 条件判断和循环最多三层</h4><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p><h4 id="1-5-9-this-的转换命名"><a href="#1-5-9-this-的转换命名" class="headerlink" title="1.5.9 this 的转换命名"></a>1.5.9 this 的转换命名</h4><p>对上下文 this 的引用只能使用’self’来命名</p><h4 id="1-5-10-慎用-console-log"><a href="#1-5-10-慎用-console-log" class="headerlink" title="1.5.10 慎用 console.log"></a>1.5.10 慎用 console.log</h4><p>因 console.log 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能</p><h1 id="二、Vue-项目规范"><a href="#二、Vue-项目规范" class="headerlink" title="二、Vue 项目规范"></a>二、Vue 项目规范</h1><h3 id="一-Vue-编码基础"><a href="#一-Vue-编码基础" class="headerlink" title="(一) Vue 编码基础"></a>(一) Vue 编码基础</h3><p>vue 项目规范以 Vue 官方规范 （<a href="https://cn.vuejs.org/v2/style-guide/%EF%BC%89">https://cn.vuejs.org/v2/style-guide/）</a> 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。</p><blockquote><p>请仔仔细细阅读 Vue 官方规范，切记，此为第一步。</p></blockquote><h4 id="2-1-1-组件规范"><a href="#2-1-1-组件规范" class="headerlink" title="2.1.1. 组件规范"></a>2.1.1. 组件规范</h4><h5 id="1-组件名为多个单词。"><a href="#1-组件名为多个单词。" class="headerlink" title="1) 组件名为多个单词。"></a>1) 组件名为多个单词。</h5><p>组件名应该始终是多个单词组成（大于等于 2），且命名规范为<code>KebabCase</code>格式。<br>这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p><p>正例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;TodoItem&#x27;</span><br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Todo&#x27;</span>,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;todo-item&#x27;</span>,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-组件文件名为-pascal-case-格式"><a href="#2-组件文件名为-pascal-case-格式" class="headerlink" title="2) 组件文件名为 pascal-case 格式"></a>2) 组件文件名为 pascal-case 格式</h5><p>正例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">components/<br><span class="hljs-string">|- my-component.vue</span><br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">components/<br><span class="hljs-string">|- myComponent.vue</span><br><span class="hljs-string">|- MyComponent.vue</span><br></code></pre></td></tr></table></figure><h5 id="3-基础组件文件名为-base-开头，使用完整单词而不是缩写。"><a href="#3-基础组件文件名为-base-开头，使用完整单词而不是缩写。" class="headerlink" title="3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。"></a>3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。</h5><p>正例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">components/<br><span class="hljs-string">|- base-button.vue</span><br><span class="hljs-string">|- base-table.vue</span><br><span class="hljs-string">|- base-icon.vue</span><br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">components/<br><span class="hljs-string">|- MyButton.vue</span><br><span class="hljs-string">|- VueTable.vue</span><br><span class="hljs-string">|- Icon.vue</span><br></code></pre></td></tr></table></figure><h5 id="4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名"><a href="#4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名" class="headerlink" title="4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名"></a>4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名</h5><p>正例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">components/<br><span class="hljs-string">|- todo-list.vue</span><br><span class="hljs-string">|- todo-list-item.vue</span><br><span class="hljs-string">|- todo-list-item-button.vue</span><br><span class="hljs-string">|- user-profile-options.vue （完整单词）</span><br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">components/<br><span class="hljs-string">|- TodoList.vue</span><br><span class="hljs-string">|- TodoItem.vue</span><br><span class="hljs-string">|- TodoButton.vue</span><br><span class="hljs-string">|- UProfOpts.vue （使用了缩写）</span><br></code></pre></td></tr></table></figure><h5 id="5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。"><a href="#5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。" class="headerlink" title="5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。"></a>5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。</h5><p>正例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Row</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">:column</span>=<span class="hljs-string">&quot;data&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span><br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;my-component /&gt; &lt;row&gt;&lt;table <span class="hljs-symbol">:column=<span class="hljs-string">&quot;data&quot;</span>/&gt;&lt;/row&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-组件的-data-必须是一个函数"><a href="#6-组件的-data-必须是一个函数" class="headerlink" title="6) 组件的 data 必须是一个函数"></a>6) 组件的 data 必须是一个函数</h5><p>当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。</p><p>正例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">data</span> () &#123;</span><br><span class="hljs-class">    <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">      <span class="hljs-title">name</span>: &#x27;<span class="hljs-title">jack&#x27;</span></span><br><span class="hljs-class">    &#125;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">data</span>: &#123;</span><br><span class="hljs-class">    <span class="hljs-title">name</span>: &#x27;<span class="hljs-title">jack&#x27;</span></span><br><span class="hljs-class">  &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="7-Prop-定义应该尽量详细"><a href="#7-Prop-定义应该尽量详细" class="headerlink" title="7) Prop 定义应该尽量详细"></a>7) Prop 定义应该尽量详细</h5><ul><li>必须使用 camelCase 驼峰命名</li><li>必须指定类型</li><li>必须加上注释，表明其含义</li><li>必须加上 required 或者 default，两者二选其一</li><li>如果有业务需要，必须加上 validator 验证</li></ul><p>正例：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ada"> props: &#123;<br>  // 组件状态，用于控制组件的颜色<br>   status: &#123;<br>     <span class="hljs-keyword">type</span>: String,<br>     required: <span class="hljs-literal">true</span>,<br>     validator: <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(value) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-type">[</span><br>         <span class="hljs-symbol">&#x27;succ</span>&#x27;,<br>         <span class="hljs-symbol">&#x27;info</span>&#x27;,<br>         <span class="hljs-symbol">&#x27;error</span>&#x27;<br>       ].indexOf(value) !== -<span class="hljs-number">1</span><br>     &#125;<br>   &#125;,<br>    // 用户级别，用于显示皇冠个数<br>   userLevel：&#123;<br>      <span class="hljs-keyword">type</span>: String,<br>      required: <span class="hljs-literal">true</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-为组件样式设置作用域"><a href="#8-为组件样式设置作用域" class="headerlink" title="8) 为组件样式设置作用域"></a>8) 为组件样式设置作用域</h5><p>正例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-close&quot;</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用 `scoped` 特性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.btn-close</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-close&quot;</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 没有使用 `scoped` 特性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.btn-close</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="9-如果特性元素较多，应该主动换行。"><a href="#9-如果特性元素较多，应该主动换行。" class="headerlink" title="9) 如果特性元素较多，应该主动换行。"></a>9) 如果特性元素较多，应该主动换行。</h5><p>正例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;MyComponent foo<span class="hljs-operator">=</span><span class="hljs-string">&quot;a&quot;</span> bar<span class="hljs-operator">=</span><span class="hljs-string">&quot;b&quot;</span> baz<span class="hljs-operator">=</span><span class="hljs-string">&quot;c&quot;</span><br>    foo<span class="hljs-operator">=</span><span class="hljs-string">&quot;a&quot;</span> bar<span class="hljs-operator">=</span><span class="hljs-string">&quot;b&quot;</span> baz<span class="hljs-operator">=</span><span class="hljs-string">&quot;c&quot;</span><br>    foo<span class="hljs-operator">=</span><span class="hljs-string">&quot;a&quot;</span> bar<span class="hljs-operator">=</span><span class="hljs-string">&quot;b&quot;</span> baz<span class="hljs-operator">=</span><span class="hljs-string">&quot;c&quot;</span><br> /&gt;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;MyComponent <span class="hljs-attribute">foo</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attribute">bar</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attribute">baz</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attribute">foo</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attribute">bar</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attribute">baz</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attribute">foo</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attribute">bar</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attribute">baz</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attribute">foo</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attribute">bar</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attribute">baz</span>=<span class="hljs-string">&quot;c&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h4 id="2-1-2-模板中使用简单的表达式"><a href="#2-1-2-模板中使用简单的表达式" class="headerlink" title="2.1.2. 模板中使用简单的表达式"></a>2.1.2. 模板中使用简单的表达式</h4><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p><p>正例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;template&gt;<br>  &lt;p&gt;&#123;&#123; normalizedFullName &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br><br><span class="hljs-comment">// 复杂表达式已经移入一个计算属性</span><br>computed: &#123;<br>  <span class="hljs-attr">normalizedFullName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> this.fullName.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">word</span>) &#123;<br>      <span class="hljs-keyword">return</span> word[<span class="hljs-number">0</span>].toUpperCase() + word.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>)<br>    &#125;).join(<span class="hljs-string">&#x27; &#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">       </span><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">          <span class="hljs-name">fullName.split</span>(<span class="hljs-name">&#x27; &#x27;</span>).map(<span class="hljs-name">function</span> (<span class="hljs-name">word</span>) &#123;</span><br><span class="hljs-template-variable">             return word[0].toUpperCase() + word.slice(<span class="hljs-name">1</span>)</span><br><span class="hljs-template-variable">           &#125;).join(<span class="hljs-name">&#x27; &#x27;</span>)</span><br><span class="hljs-template-variable">        &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="2-1-3-指令都使用缩写形式"><a href="#2-1-3-指令都使用缩写形式" class="headerlink" title="2.1.3 指令都使用缩写形式"></a>2.1.3 指令都使用缩写形式</h4><p>指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:)</p><p>正例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-built_in">input</span><br><span class="hljs-meta">  @input=<span class="hljs-string">&quot;onInput&quot;</span></span><br><span class="hljs-meta">  @focus=<span class="hljs-string">&quot;onFocus&quot;</span></span><br>&gt;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">input</span><br>  v-<span class="hljs-keyword">on</span>:<span class="hljs-keyword">input</span>=<span class="hljs-string">&quot;onInput&quot;</span><br>  @focus=<span class="hljs-string">&quot;onFocus&quot;</span><br>&gt;<br></code></pre></td></tr></table></figure><h4 id="2-1-4-标签顺序保持一致"><a href="#2-1-4-标签顺序保持一致" class="headerlink" title="2.1.4 标签顺序保持一致"></a>2.1.4 标签顺序保持一致</h4><p>单文件组件应该总是让标签顺序保持为 <code>&lt;template&gt; 、&lt;script&gt;、 &lt;style&gt;</code></p><p>正例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-1-5-必须为-v-for-设置键值-key"><a href="#2-1-5-必须为-v-for-设置键值-key" class="headerlink" title="2.1.5 必须为 v-for 设置键值 key"></a>2.1.5 必须为 v-for 设置键值 key</h4><h4 id="2-1-6-v-show-与-v-if-选择"><a href="#2-1-6-v-show-与-v-if-选择" class="headerlink" title="2.1.6 v-show 与 v-if 选择"></a>2.1.6 v-show 与 v-if 选择</h4><p>如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。</p><h4 id="2-1-7-script-标签内部结构顺序"><a href="#2-1-7-script-标签内部结构顺序" class="headerlink" title="2.1.7 script 标签内部结构顺序"></a>2.1.7 script 标签内部结构顺序</h4><p>components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（钩子函数按其执行顺序） &gt; methods</p><h4 id="2-1-8-Vue-Router-规范"><a href="#2-1-8-Vue-Router-规范" class="headerlink" title="2.1.8 Vue Router 规范"></a>2.1.8 Vue Router 规范</h4><h5 id="1-页面跳转数据传递使用路由参数"><a href="#1-页面跳转数据传递使用路由参数" class="headerlink" title="1) 页面跳转数据传递使用路由参数"></a>1) 页面跳转数据传递使用路由参数</h5><p>页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。</p><p>正例：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span><span class="hljs-built_in"> id</span> = <span class="hljs-string">&#x27; 123&#x27;</span>;<br>this.<span class="hljs-variable">$router</span>.push(&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;userCenter&#x27;</span>, query: &#123;<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> id</span> &#125; &#125;);<br></code></pre></td></tr></table></figure><h5 id="2-使用路由懒加载（延迟加载）机制"><a href="#2-使用路由懒加载（延迟加载）机制" class="headerlink" title="2) 使用路由懒加载（延迟加载）机制"></a>2) 使用路由懒加载（延迟加载）机制</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&#123;<br>    path: <span class="hljs-string">&#x27;/uploadAttachment&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;uploadAttachment&#x27;</span>,<br>    meta: &#123;<br>      title: <span class="hljs-string">&#x27;上传附件&#x27;</span><br>    &#125;,<br>    component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/view/components/uploadAttachment/index.vue&#x27;</span>)<br>  &#125;,<br></code></pre></td></tr></table></figure><h5 id="3-router-中的命名规范"><a href="#3-router-中的命名规范" class="headerlink" title="3) router 中的命名规范"></a>3) router 中的命名规范</h5><p>path、childrenPoints 命名规范采用<code>kebab-case</code>命名规范（尽量vue文件的目录结构保持一致，因为目录、文件名都是<code>kebab-case</code>，这样很方便找到对应的文件）</p><p>name 命名规范采用<code>KebabCase</code>命名规范且和component组件名保持一致！（因为要保持keep-alive特性，keep-alive按照component的name进行缓存，所以两者必须高度保持一致）</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">// 动态加载</span><br>export const reload = [<br>  &#123;<br>    <span class="hljs-built_in">path</span>: <span class="hljs-string">&#x27;/reload&#x27;</span>,<br>    <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;reload&#x27;</span>,<br>    component: Main,<br>    meta: &#123;<br>      <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;动态加载&#x27;</span>,<br>      icon: <span class="hljs-string">&#x27;icon iconfont&#x27;</span><br>    &#125;,<br><br>    children: [<br>      &#123;<br>        <span class="hljs-built_in">path</span>: <span class="hljs-string">&#x27;/reload/smart-reload-list&#x27;</span>,<br>        <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;SmartReloadList&#x27;</span>,<br>        meta: &#123;<br>          <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;SmartReload&#x27;</span>,<br>          childrenPoints: [<br>            &#123;<br>              <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;查询&#x27;</span>,<br>              <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;smart-reload-search&#x27;</span><br>            &#125;,<br>            &#123;<br>              <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;执行reload&#x27;</span>,<br>              <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;smart-reload-update&#x27;</span><br>            &#125;,<br>            &#123;<br>              <span class="hljs-built_in">title</span>: <span class="hljs-string">&#x27;查看执行结果&#x27;</span>,<br>              <span class="hljs-keyword">name</span>: <span class="hljs-string">&#x27;smart-reload-result&#x27;</span><br>            &#125;<br>          ]<br>        &#125;,<br>        component: () =&gt;<br>          <span class="hljs-keyword">import</span>(&#x27;@/views/reload/smart-reload/smart-reload-list.vue&#x27;)<br>      &#125;<br>    ]<br>  &#125;<br>];<br></code></pre></td></tr></table></figure><h5 id="4-router-中的-path-命名规范"><a href="#4-router-中的-path-命名规范" class="headerlink" title="4) router 中的 path 命名规范"></a>4) router 中的 path 命名规范</h5><p>path除了采用<code>kebab-case</code>命名规范以外，必须以 &#x2F; 开头，即使是children里的path也要以 &#x2F; 开头。如下示例</p><p>- </p><p>目的：</p><p>经常有这样的场景：某个页面有问题，要立刻找到这个vue文件，如果不用以&#x2F;开头，path为parent和children组成的，可能经常需要在router文件里搜索多次才能找到，而如果以&#x2F;开头，则能立刻搜索到对应的组件<br>*</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&#123;<br>    path: <span class="hljs-string">&#x27;/file&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;File&#x27;</span>,<br>    component: Main,<br>    meta: &#123;<br>      title: <span class="hljs-string">&#x27;文件服务&#x27;</span>,<br>      icon: <span class="hljs-string">&#x27;ios-cloud-upload&#x27;</span><br>    &#125;,<br>    children: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/file/file-list&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;FileList&#x27;</span>,<br>        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/file/file-list.vue&#x27;</span>)<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/file/file-add&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;FileAdd&#x27;</span>,<br>        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/file/file-add.vue&#x27;</span>)<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/file/file-update&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;FileUpdate&#x27;</span>,<br>        component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/file/file-update.vue&#x27;</span>)<br>      &#125;<br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="二-Vue-项目目录规范"><a href="#二-Vue-项目目录规范" class="headerlink" title="(二) Vue 项目目录规范"></a>(二) Vue 项目目录规范</h3><h4 id="2-2-1-基础"><a href="#2-2-1-基础" class="headerlink" title="2.2.1 基础"></a>2.2.1 基础</h4><p>vue 项目中的所有命名一定要与后端命名统一。</p><p>比如权限：后端 privilege, 前端无论 router , store, api 等都必须使用 privielege 单词！</p><h4 id="2-2-2-使用-Vue-cli-脚手架"><a href="#2-2-2-使用-Vue-cli-脚手架" class="headerlink" title="2.2.2 使用 Vue-cli 脚手架"></a>2.2.2 使用 Vue-cli 脚手架</h4><p>使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。</p><h4 id="2-2-3-目录说明"><a href="#2-2-3-目录说明" class="headerlink" title="2.2.3 目录说明"></a>2.2.3 目录说明</h4><p>目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">src                               源码目录<br>|<span class="hljs-string">-- api                              所有api接口</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- assets                           静态资源，images, icons, styles等</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- components                       公用组件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- config                           配置信息</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- constants                        常量信息，项目所有Enum, 全局常量等</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- directives                       自定义指令</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- filters                          过滤器，全局工具</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- datas                            模拟数据，临时存放</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- lib                              外部引用的插件存放及修改文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- mock                             模拟接口，临时存放</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- plugins                          插件，全局使用</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- router                           路由，统一管理</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- store                            vuex, 统一管理</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- themes                           自定义样式主题</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- views                            视图目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- role                             role模块名</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- </span>|<span class="hljs-string">-- role-list.vue                    role列表页面</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- </span>|<span class="hljs-string">-- role-add.vue                     role新建页面</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- </span>|<span class="hljs-string">-- role-update.vue                  role更新页面</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- </span>|<span class="hljs-string">-- index.less                      role模块样式</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- </span>|<span class="hljs-string">-- components                      role模块通用组件文件夹</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- employee                         employee模块</span><br></code></pre></td></tr></table></figure><h5 id="1-api-目录"><a href="#1-api-目录" class="headerlink" title="1) api 目录"></a>1) api 目录</h5><ul><li>文件、变量命名要与后端保持一致。</li><li>此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。</li><li>api 中的方法名字要与后端 api url 尽量保持语义高度一致性。</li><li>对于 api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。</li></ul><p>正例：</p><p>后端 url： EmployeeController.java</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/employee/</span>add<br><span class="hljs-regexp">/employee/</span><span class="hljs-keyword">delete</span>/&#123;id&#125;<br><span class="hljs-regexp">/employee/u</span>pdate<br></code></pre></td></tr></table></figure><p>前端： employee.js</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 添加员工</span><br>addEmployee:<span class="hljs-function"> (<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  return post<span class="hljs-constructor">Axios(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">employee</span><span class="hljs-operator">/</span><span class="hljs-params">add</span>&#x27;, <span class="hljs-params">data</span>)</span><br>&#125;,<br><span class="hljs-comment">// 更新员工信息</span><br>updateEmployee:<span class="hljs-function"> (<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  return post<span class="hljs-constructor">Axios(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">employee</span><span class="hljs-operator">/</span><span class="hljs-params">update</span>&#x27;, <span class="hljs-params">data</span>)</span><br>&#125;,<br>  <span class="hljs-comment">// 删除员工</span><br>deleteEmployee:<span class="hljs-function"> (<span class="hljs-params">employeeId</span>) =&gt;</span> &#123;<br>  return post<span class="hljs-constructor">Axios(&#x27;<span class="hljs-operator">/</span><span class="hljs-params">employee</span><span class="hljs-operator">/</span><span class="hljs-params">delete</span><span class="hljs-operator">/</span>&#x27; + <span class="hljs-params">employeeId</span>)</span><br> &#125;,<br></code></pre></td></tr></table></figure><h5 id="2-assets-目录"><a href="#2-assets-目录" class="headerlink" title="2) assets 目录"></a>2) assets 目录</h5><p>assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">assets</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- icons</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- images</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- background-color.png</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- upload-header.png</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- styles</span><br></code></pre></td></tr></table></figure><h5 id="3-components-目录"><a href="#3-components-目录" class="headerlink" title="3) components 目录"></a>3) components 目录</h5><p>此目录应按照组件进行目录划分，目录命名为 KebabCase，组件命名规则也为 KebabCase</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">components</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- error-log</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- index.vue</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- index.less</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- markdown-editor</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- index.vue</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- index.js</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- kebab-case</span><br></code></pre></td></tr></table></figure><h5 id="4-constants-目录"><a href="#4-constants-目录" class="headerlink" title="4) constants 目录"></a>4) constants 目录</h5><p>此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件(<a href="https://www.npmjs.com/package/vue-enum">https://www.npmjs.com/package/vue-enum</a>)</p><p>目录结构：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|constants</span><br><span class="hljs-string">|-- index.js</span><br><span class="hljs-string">|-- role.js</span><br><span class="hljs-string">|-- employee.js</span><br></code></pre></td></tr></table></figure><p>例子： employee.js</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">export const EMPLOYEE_STATUS = &#123;</span><br><span class="hljs-attribute">  NORMAL</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1,</span><br>    <span class="hljs-attribute">desc</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;正常&#x27;</span><br>  <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">  DISABLED</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1,</span><br>    <span class="hljs-attribute">desc</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;禁用&#x27;</span><br>  <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">  DELETED</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2,</span><br>    <span class="hljs-attribute">desc</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;已删除&#x27;</span><br>  <span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute">&#125;;</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">export const EMPLOYEE_ACCOUNT_TYPE = &#123;</span><br><span class="hljs-attribute">  QQ</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1,</span><br>    <span class="hljs-attribute">desc</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;QQ登录&#x27;</span><br>  <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">  WECHAT</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">2,</span><br>    <span class="hljs-attribute">desc</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;微信登录&#x27;</span><br>  <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">  DINGDING</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3,</span><br>    <span class="hljs-attribute">desc</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;钉钉登录&#x27;</span><br>  <span class="hljs-attribute">&#125;,</span><br><span class="hljs-attribute">  USERNAME</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">4,</span><br>    <span class="hljs-attribute">desc</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;用户名密码登录&#x27;</span><br>  &#125;<br>&#125;;<br><br>export default &#123;<br>  EMPLOYEE_STATUS,<br>  EMPLOYEE_ACCOUNT_TYPE<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="5-router-与-store-目录"><a href="#5-router-与-store-目录" class="headerlink" title="5) router 与 store 目录"></a>5) router 与 store 目录</h5><p>这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。</p><p>router 尽量按照 views 中的结构保持一致</p><p>store 按照业务进行拆分不同的 js 文件</p><h5 id="6-views-目录"><a href="#6-views-目录" class="headerlink" title="6) views 目录"></a>6) views 目录</h5><ul><li>命名要与后端、router、api 等保持一致</li><li>components 中组件要使用 PascalCase 规则</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- views                            视图目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- role                             role模块名</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- role-list.vue                    role列表页面</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- role-add.vue                     role新建页面</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- role-update.vue                  role更新页面</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- index.less                      role模块样式</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- components                      role模块通用组件文件夹</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- role-header.vue                        role头部组件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- role-modal.vue                         role弹出框组件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- employee                         employee模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- behavior-log                      行为日志log模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- code-generator                    代码生成器模块</span><br></code></pre></td></tr></table></figure><h4 id="2-2-4-注释说明"><a href="#2-2-4-注释说明" class="headerlink" title="2.2.4 注释说明"></a>2.2.4 注释说明</h4><p>整理必须加注释的地方</p><ul><li>公共组件使用说明</li><li>api 目录的接口 js 文件必须加注释</li><li>store 中的 state, mutation, action 等必须加注释</li><li>vue 文件中的 template 必须加注释，若文件较大添加 start end 注释</li><li>vue 文件的 methods，每个 method 必须添加注释</li><li>vue 文件的 data, 非常见单词要加注释</li></ul><h4 id="2-2-5-其他"><a href="#2-2-5-其他" class="headerlink" title="2.2.5 其他"></a>2.2.5 其他</h4><h5 id="1-尽量不要手动操作-DOM"><a href="#1-尽量不要手动操作-DOM" class="headerlink" title="1) 尽量不要手动操作 DOM"></a>1) 尽量不要手动操作 DOM</h5><p>因使用 vue 框架，所以在项目开发中尽量使用 vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 dom 元素、以及更改样式、添加事件等。</p><h5 id="2-删除无用代码"><a href="#2-删除无用代码" class="headerlink" title="2) 删除无用代码"></a>2) 删除无用代码</h5><p>因使用了 git&#x2F;svn 等代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码规范</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码规范</title>
    <link href="/2023/04/25/Java%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <url>/2023/04/25/Java%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Java代码规范"><a href="#Java代码规范" class="headerlink" title="Java代码规范"></a>Java代码规范</h1><p>Java Standard Guide</p><h1 id="JAVA-开发规范"><a href="#JAVA-开发规范" class="headerlink" title="JAVA 开发规范"></a>JAVA 开发规范</h1><p>本篇规范基于阿里巴巴、华为的开发手册，添加了我们团队的风格和规范，补充了一些细节。感谢前人的经验和付出，让我们可以有机会站在巨人的肩膀上眺望星辰大海。</p><p>规范不是为了约束和禁锢大家的创造力，而是为了帮助大家能够在正确的道路上，尽可能的避免踩坑和跑偏。<br>规范可以让我们无论单枪匹马还是与众人同行的时候都能得心应手。<br>规范可以让我们在面对日益变态的需求和做代码接盘侠的时候，更优雅从容。</p><blockquote><p>规则并不是完美的，通过约束和禁止在特定情况下的特性，可能会对代码实现造成影响。<br>但是我们制定规则的目的：<strong>为了大多数程序员小伙伴可以得到更多的好处</strong>，如果在团队实际运作中认为某个规则无法遵循或有更好的做法，希望大家可以共同改进该规范。</p></blockquote><h2 id="一、编程规范"><a href="#一、编程规范" class="headerlink" title="一、编程规范"></a>一、编程规范</h2><h3 id="1、好代码的原则"><a href="#1、好代码的原则" class="headerlink" title="1、好代码的原则"></a>1、好代码的原则</h3><blockquote><p>我们参考 Kent Beck 的简单设计四原则来指导我们的如何写出优秀的代码，如何有效地判断我们的代码是优秀的。</p></blockquote><ul><li>通过所有测试（Passes its tests）：强调的是外部需求，这是代码实现最重要的</li><li>尽可能消除重复 (Minimizes duplication)：代码的模块架构设计，保证代码的正交性，保证代码更容易修改</li><li>尽可能清晰表达 (Maximizes clarity)：代码的可阅读性，保证代码是容易阅读的</li><li>更少代码元素 (Has fewer elements)：保证代码是简洁的，在简洁和表达力之间，我们更看重表达力</li></ul><p>以上四个原则的重要程度依次降低， 这组定义被称做简单设计原则。</p><h3 id="2、项目命名规范"><a href="#2、项目命名规范" class="headerlink" title="2、项目命名规范"></a>2、项目命名规范</h3><p>全部采用小写方式， 以中划线分隔。</p><p>正例：<code>mall-management-system / order-service-client / user-api</code></p><p>反例：<code>mall_management-system / mallManagementSystem / orderServiceClient</code></p><h3 id="3、TODO-x2F-FIXME-规范"><a href="#3、TODO-x2F-FIXME-规范" class="headerlink" title="3、TODO&#x2F;FIXME 规范"></a>3、TODO&#x2F;FIXME 规范</h3><p><code>TODO/TBD(to be determined)</code> 注释一般用来描述已知待改进、待补充的修改点,并且加上作者名称。<br><code>FIXME</code> 注释一般用来描述已知缺陷，它们都应该有统一风格，方便文本搜索统一处理。如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> TODO &lt;author-name&gt;: 补充XX处理<br><span class="hljs-regexp">//</span> FIXME &lt;author-name&gt;: XX缺陷<br></code></pre></td></tr></table></figure><h3 id="4、方法参数规范"><a href="#4、方法参数规范" class="headerlink" title="4、方法参数规范"></a>4、方法参数规范</h3><p>无论是 <code>controller，service，manager，dao</code> 亦或是其他的代码，每个方法最多 <code>3</code> 个参数，如果超出 <code>3</code> 个参数的话，要封装成 <code>javabean</code> 对象。</p><ol><li>方便他人调用，降低出错几率。尤其是当参数是同一种类型，仅仅依靠顺序区分，稍有不慎便是灾难性后果，而且排查起来也极其恶心。</li><li>保持代码整洁、清晰度。当一个个方法里充斥着一堆堆参数的时候，再坚强的人，也会身心疲惫。</li></ol><p>反例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 使用证书加密数据工具方法</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> <span class="hljs-variable">param</span></span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> password 加密密码</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> priCert 私钥</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> pubCert 公钥</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> 返回加密后的字符串</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">signEnvelop</span>(<span class="hljs-params">JdRequestParam param, <span class="hljs-built_in">String</span> password, <span class="hljs-built_in">String</span> priCert, <span class="hljs-built_in">String</span> pubCert</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="5、注释规范"><a href="#5、注释规范" class="headerlink" title="5、注释规范"></a>5、注释规范</h3><h4 id="5-1、注释和代码一样重要"><a href="#5-1、注释和代码一样重要" class="headerlink" title="5-1、注释和代码一样重要"></a>5-1、注释和代码一样重要</h4><p>注释是我们披荆斩棘历经磨难翻越需求这座大山时，留下的踪迹和收获的经验教训，这些宝贵的知识除了证明我们曾经存在过，也提醒着后来的人们殷鉴不远、继往开来。</p><p>注释除了说明作用、逻辑之外。还有一个很重要的原因：当业务逻辑过于复杂，代码过于庞大的时候，注释就变成了一道道美化环境、分离与整理逻辑思路的路标。这是很重要的一点，它能有效得帮助我们免于陷入代码与业务逻辑的泥沼之中。</p><p>正例：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">/**<br>* 开始抽奖方法<br>* 保存中奖信息、奖励用户积分等<br>* @param luckDrawDTO<br>* @return ResponseDTO 返回中奖信息<br>*/<br>public ResponseDTO&lt;String&gt; startLuckDraw<span class="hljs-params">(LuckDrawDTO luckDrawDTO)</span> &#123;<br><br>    <span class="hljs-string">//</span> <span class="hljs-params">--------------</span> 1、校验抽奖活动基本信息 <span class="hljs-params">------------------------</span><br>    xxx伪代码一顿操作<br><br>    <span class="hljs-string">//</span> <span class="hljs-params">--------------</span> 2、新增抽奖记录 <span class="hljs-params">-------------------------------</span><br>    xxx伪代码一顿操作<br><br>    <span class="hljs-string">//</span> <span class="hljs-params">--------------</span> 3、如果需要消耗积分，则扣除钢镚积分 <span class="hljs-params">-------------</span><br>    xxx伪代码一顿操作<br><br>    <span class="hljs-string">//</span> <span class="hljs-params">--------------</span> 4、获取奖品信息，开始翻滚吧 <span class="hljs-params">--------------------</span><br>    xxx伪代码一顿操作<br><br>    return ResponseDTO.succ<span class="hljs-params">(luckDrawPrizeVO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2、注释和代码的一致性"><a href="#5-2、注释和代码的一致性" class="headerlink" title="5-2、注释和代码的一致性"></a>5-2、注释和代码的一致性</h4><p>注释并不是越多越好，当注释过多，维护代码的同时，还需要维护注释，不仅变成了一种负担，也与我们当初添加注释的初衷背道而驰。</p><p>首先：大家应该通过清晰的逻辑架构，好的变量命名来提高代码可读性；需要的时候，才辅以注释说明。注释是为了帮助阅读者快速读懂代码，所以要从读者的角度出发，按需注释。注释内容要简洁、明了、无二义性，信息全面且不冗余。</p><p>其次：无论是修改、复制代码时，都要仔细核对注释内容是否正确。只改代码，不改注释是一种不文明行为，破坏了代码与注释的一致性，会让阅读者迷惑、费解，甚至误解。</p><p>反例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 查询部门</span><br>EmployeeDTO employee = employeeDao.<span class="hljs-built_in">list</span><span class="hljs-constructor">ByDeptId(<span class="hljs-params">deptId</span>)</span>;<br></code></pre></td></tr></table></figure><h4 id="5-3、方法注释"><a href="#5-3、方法注释" class="headerlink" title="5-3、方法注释"></a>5-3、方法注释</h4><p>方法要尽量通过方法名自解释，不要写无用、信息冗余的方法头，不要写空有格式的方法头注释。</p><p>方法头注释内容可选，但不限于：功能说明、返回值，用法、算法实现等等。尤其是对外的方法接口声明，其注释，应当将重要、有用的信息表达清楚。</p><p>正例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析转换时间字符串为 LocalDate 时间类</span><br><span class="hljs-comment"> * 调用前必须校验字符串格式 否则可能造成解析失败的错误异常</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dateStr 必须是 yyyy-MM-dd 格式的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> <span class="hljs-variable">LocalDate</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">LocalDate</span> <span class="hljs-title function_">parseYMD</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> dateStr</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 校验对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param t</span><br><span class="hljs-comment"> * @return String</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-type">String</span> <span class="hljs-title">checkObj</span><span class="hljs-params">(T t)</span></span>;<br></code></pre></td></tr></table></figure><p>反例中出现的问题：</p><ul><li>方法注释没有说明具体的作用、使用事项。</li><li>参数、返回值，空有格式没内容。这是非常重要一点，任何人调用任何方法之前都需要知道方法对参数的要求，以及返回值是什么。</li></ul><h2 id="二、项目规范"><a href="#二、项目规范" class="headerlink" title="二、项目规范"></a>二、项目规范</h2><h3 id="1、代码目录结构"><a href="#1、代码目录结构" class="headerlink" title="1、代码目录结构"></a>1、代码目录结构</h3><p>统一的目录结构是所有项目的基础。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">src                               源码目录</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">common                            各个项目的通用类库</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">config                            项目的配置信息</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">constant                          全局公共常量</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">handler                           全局处理器</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">interceptor                       全局连接器</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">listener                          全局监听器</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">module                            各个业务</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">employee                         员工模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">role                             角色模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">login                            登录模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">third                             三方服务，比如redis</span><span class="hljs-string">,</span> <span class="hljs-comment">oss，微信sdk等等</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">util                              全局工具类</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">Application</span><span class="hljs-string">.</span><span class="hljs-comment">java                  启动类</span><br></code></pre></td></tr></table></figure><h3 id="2、common-目录规范"><a href="#2、common-目录规范" class="headerlink" title="2、common 目录规范"></a>2、common 目录规范</h3><p>common 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">src 源码目录</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">common 各个项目的通用类库</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">anno          通用注解，比如权限，登录等等</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">constant      通用常量，比如 ResponseCodeConst</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">domain        全局的 javabean，比如 BaseEntity</span><span class="hljs-string">,</span><span class="hljs-comment">PageParamDTO 等</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">exception     全局异常，如 BusinessException</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">json          json 类库，如 LongJsonDeserializer，LongJsonSerializer</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">swagger       swagger 文档</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">validator     适合各个项目的通用 validator，如 CheckEnum，CheckBigDecimal 等</span><br></code></pre></td></tr></table></figure><h3 id="3、config-目录规范"><a href="#3、config-目录规范" class="headerlink" title="3、config 目录规范"></a>3、config 目录规范</h3><p>config 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">src                               源码目录</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">config                            项目的所有配置信息</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">MvcConfig                    mvc的相关配置，如interceptor</span><span class="hljs-string">,</span><span class="hljs-comment">filter等</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">DataSourceConfig             数据库连接池的配置</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-comment">MybatisConfig                mybatis的配置</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">---</span> <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span>                         <span class="hljs-comment">其他</span><br></code></pre></td></tr></table></figure><h3 id="4、module-目录规范"><a href="#4、module-目录规范" class="headerlink" title="4、module 目录规范"></a>4、module 目录规范</h3><p>module 目录里写项目的各个业务，每个业务一个独立的顶级文件夹，在文件里进行 mvc 的相关划分。<br>其中，domain 包里存放 entity, dto, vo，bo 等 javabean 对象</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">src</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">module                         所有业务模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">role                          角色模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span><span class="hljs-comment">RoleController</span><span class="hljs-string">.</span><span class="hljs-comment">java              controller</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span><span class="hljs-comment">RoleConst</span><span class="hljs-string">.</span><span class="hljs-comment">java                   role相关的常量</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span><span class="hljs-comment">RoleService</span><span class="hljs-string">.</span><span class="hljs-comment">java                 service</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span><span class="hljs-comment">RoleDao</span><span class="hljs-string">.</span><span class="hljs-comment">java                     dao</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span><span class="hljs-comment">domain                           domain</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">RoleEntity</span><span class="hljs-string">.</span><span class="hljs-comment">java                  表对应实体</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">RoleDTO</span><span class="hljs-string">.</span><span class="hljs-comment">java                     dto对象</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">RoleVO</span><span class="hljs-string">.</span><span class="hljs-comment">java                      返回对象</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">employee                      员工模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">login                         登录模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">email                         邮件模块</span><br><span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-comment">|</span><span class="hljs-literal">--</span> <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span>                          <span class="hljs-comment">其他</span><br></code></pre></td></tr></table></figure><h3 id="5、-domain-包中的-javabean-命名规范"><a href="#5、-domain-包中的-javabean-命名规范" class="headerlink" title="5、 domain 包中的 javabean 命名规范"></a>5、 domain 包中的 javabean 命名规范</h3><p>1） <code>javabean</code> 的整体要求：</p><ul><li>不得有任何的业务逻辑或者计算</li><li>基本数据类型必须使用包装类型<code>（Integer, Double、Boolean 等）</code></li><li>不允许有任何的默认值</li><li>每个属性必须添加注释，并且必须使用多行注释。</li><li>必须使用 <code>lombok</code> 简化 <code>getter/setter</code> 方法</li><li>建议对象使用 <code>lombok</code> 的 <code>@Builder ，@NoArgsConstructor</code>，同时使用这两个注解，简化对象构造方法以及set方法。</li></ul><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoDTO</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><br><span class="hljs-comment">// 使用示例：</span><br><br><span class="hljs-type">DemoDTO</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> DemoDTO.builder()<br>                .name(<span class="hljs-string">&quot;yeqiu&quot;</span>)<br>                .age(<span class="hljs-number">66</span>)<br>                .build();<br></code></pre></td></tr></table></figure><p>2）数据对象；<code>XxxxEntity</code>，要求：</p><ul><li>以 <code>Entity</code> 为结尾（阿里是为 DO 为结尾）</li><li>Xxxx 与数据库表名保持一致</li><li>类中字段要与数据库字段保持一致，不能缺失或者多余</li><li>类中的每个字段添加注释，并与数据库注释保持一致</li><li>不允许有组合</li><li>项目内的日期类型必须统一，建议使用 <code>java.util.Date，java.sql.Timestamp，java.time.LocalDateTime</code> 其中只一。</li></ul><p>3）传输对象；<code>XxxxDTO</code>，要求：</p><ul><li>不可以继承自 <code>Entity</code></li><li><code>DTO</code> 可以继承、组合其他 <code>DTO，VO，BO</code> 等对象</li><li><code>DTO</code> 只能用于前端、RPC 的请求参数</li></ul><p>3）视图对象；<code>XxxxVO</code>，要求：</p><ul><li>不可继承自 <code>Entity</code></li><li><code>VO</code> 可以继承、组合其他 <code>DTO，VO，BO</code> 等对象</li><li><code>VO</code> 只能用于返回前端、rpc 的业务数据封装对象</li></ul><p>4）业务对象 <code>BO</code>，要求：</p><ul><li>不可以继承自 <code>Entity</code></li><li><code>BO</code> 对象只能用于 <code>service，manager，dao</code> 层，不得用于 <code>controller</code> 层</li></ul><h2 id="三、MVC-规范"><a href="#三、MVC-规范" class="headerlink" title="三、MVC 规范"></a>三、MVC 规范</h2><h3 id="1、整体分层"><a href="#1、整体分层" class="headerlink" title="1、整体分层"></a>1、整体分层</h3><ul><li>controller 层</li><li>service 层</li><li>manager 层</li><li>dao 层</li></ul><h3 id="2、-controller-层规范"><a href="#2、-controller-层规范" class="headerlink" title="2、 controller 层规范"></a>2、 <code>controller</code> 层规范</h3><p>1） 只允许在 method 上添加 <code>RequestMapping</code> 注解，不允许加在 class 上（为了方便的查找 url，放到 url 不能一次性查找出来）</p><p>正例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepartmentController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/department/list&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> ResponseDTO&lt;List&lt;DepartmentVO&gt;&gt; listDepartment() &#123;<br>        <span class="hljs-keyword">return</span> departmentService.listDepartment();<br>    &#125;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">&quot;/department&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepartmentController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/list&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> ResponseDTO&lt;List&lt;DepartmentVO&gt;&gt; listDepartment() &#123;<br>        <span class="hljs-keyword">return</span> departmentService.listDepartment();<br>    &#125;<br></code></pre></td></tr></table></figure><p>2）不推荐使用 rest 命名 url， 只能使用 <code>get/post</code> 方法。url 命名上规范如下：</p><blockquote><p><em>虽然 Rest 大法好，但是有时并不能一眼根据 url 看出来是什么操作，所以我们选择了后者，这个没有对与错，只有哪个更适合我们的团队。</em></p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/业务模块/</span>子模块/动作<br></code></pre></td></tr></table></figure><p>正例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET  <span class="hljs-regexp">/department/g</span>et/&#123;id&#125;      查询某个部门详细信息<br>POST <span class="hljs-regexp">/department/</span>query         复杂查询<br>POST <span class="hljs-regexp">/department/</span>add           添加部门<br>POST <span class="hljs-regexp">/department/u</span>pdate        更新部门<br>GET  <span class="hljs-regexp">/department/</span><span class="hljs-keyword">delete</span>/&#123;id&#125;   删除部门<br></code></pre></td></tr></table></figure><p>3）每个方法必须添加 <code>swagger</code> 文档注解 <code>@ApiOperation</code> ，并填写接口描述信息，描述最后必须加上作者信息 <code>@author 哪吒</code> 。</p><p>正例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@ApiOperation</span>(<span class="hljs-string">&quot;更新部门信息 @author 哪吒&quot;</span>)<br><span class="hljs-variable">@PostMapping</span>(<span class="hljs-string">&quot;/department/update&quot;</span>)<br>public ResponseDTO&lt;String&gt; <span class="hljs-built_in">updateDepartment</span>(<span class="hljs-variable">@Valid</span> <span class="hljs-variable">@RequestBody</span> DeptUpdateDTO deptUpdateDTO) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">departmentService</span><span class="hljs-selector-class">.updateDepartment</span>(deptUpdateDTO);<br>&#125;<br></code></pre></td></tr></table></figure><p>4）controller 负责协同和委派业务，充当路由的角色，每个方法要保持简洁：</p><ul><li>不做任何的业务逻辑操作</li><li>不做任何的参数、业务校验，参数校验只允许使用@Valid 注解做简单的校验</li><li>不做任何的数据组合、拼装、赋值等操作</li></ul><p>正例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@ApiOperation</span>(<span class="hljs-string">&quot;添加部门 @author 哪吒&quot;</span>)<br><span class="hljs-variable">@PostMapping</span>(<span class="hljs-string">&quot;/department/add&quot;</span>)<br>public ResponseDTO&lt;String&gt; <span class="hljs-built_in">addDepartment</span>(<span class="hljs-variable">@Valid</span> <span class="hljs-variable">@RequestBody</span> DepartmentCreateDTO departmentCreateDTO) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">departmentService</span><span class="hljs-selector-class">.addDepartment</span>(departmentCreateDTO);<br>&#125;<br></code></pre></td></tr></table></figure><p>5）只能在 <code>controller</code> 层获取当前请求用户，并传递给 <code>service</code> 层。</p><blockquote><p><em>因为获取当前请求用户是从 ThreadLocal 里获取取的，在 service、manager、dao 层极有可能是其他非 request 线程调用，会出现 null 的情况，尽量避免</em></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@ApiOperation(<span class="hljs-string">&quot;添加员工 @author yandanyang&quot;</span>)</span><br><span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;/employee/add&quot;</span>)</span><br><span class="hljs-keyword">public</span> ResponseDTO&lt;String&gt; addEmployee(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> EmployeeAddDTO employeeAddDTO) &#123;<br>    LoginTokenBO requestToken = SmartRequestTokenUtil.getRequestUser();<br>    <span class="hljs-keyword">return</span> employeeService.addEmployee(employeeAddDTO, requestToken);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、-service-层规范"><a href="#3、-service-层规范" class="headerlink" title="3、 service 层规范"></a>3、 <code>service</code> 层规范</h3><p>1）合理拆分 service 文件，如果业务较大，请拆分为多个 service。</p><p>如订单业务,所有业务都写到 OrderService 中会导致文件过大，故需要进行拆分如下：</p><ul><li><code>OrderQueryService</code> 订单查询业务</li><li><code>OrderCreateService</code> 订单新建业务</li><li><code>OrderDeliverService</code> 订单发货业务</li><li><code>OrderValidatorService</code> 订单验证业务</li></ul><p>2）谨慎处理 <code>@Transactional</code> 事务注解的使用，不要简单对 <code>service</code> 的方法添加个 <code>@Transactional</code> 注解就觉得万事大吉了。应当合并对数据库的操作，尽量减少添加了<code>@Transactional</code>方法内的业务逻辑。<br><code>@Transactional</code> 注解内的 <code>rollbackFor</code> 值必须使用异常的基类 <code>Throwable.class</code></p><blockquote><p><em>对于@Transactional 注解，当 spring 遇到该注解时，会自动从数据库连接池中获取 connection，并开启事务然后绑定到 ThreadLocal 上，如果业务并没有进入到最终的 操作数据库环节，那么就没有必要获取连接并开启事务，应该直接将 connection 返回给数据库连接池，供其他使用（比较难以讲解清楚，如果不懂的话就主动去问）。</em></p></blockquote><p>反例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">Transactional(<span class="hljs-params">rollbackFor</span> = Throwable.<span class="hljs-params">class</span>)</span><br>public ResponseDTO&lt;String&gt; up<span class="hljs-constructor">OrDown(Long <span class="hljs-params">departmentId</span>, Long <span class="hljs-params">swapId</span>)</span> &#123;<br>    <span class="hljs-comment">// 验证 1</span><br>    DepartmentEntity departmentEntity = departmentDao.select<span class="hljs-constructor">ById(<span class="hljs-params">departmentId</span>)</span>;<br>    <span class="hljs-keyword">if</span> (departmentEntity<span class="hljs-operator"> == </span>null) &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>wrap(DepartmentResponseCodeConst.NOT_EXISTS);<br>    &#125;<br>    <span class="hljs-comment">// 验证 2</span><br>    DepartmentEntity swapEntity = departmentDao.select<span class="hljs-constructor">ById(<span class="hljs-params">swapId</span>)</span>;<br>    <span class="hljs-keyword">if</span> (swapEntity<span class="hljs-operator"> == </span>null) &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>wrap(DepartmentResponseCodeConst.NOT_EXISTS);<br>    &#125;<br>    <span class="hljs-comment">// 验证 3</span><br>    Long count = employeeDao.count<span class="hljs-constructor">ByDepartmentId(<span class="hljs-params">departmentId</span>)</span><br>    <span class="hljs-keyword">if</span> (count != null<span class="hljs-operator"> &amp;&amp; </span>count &gt; <span class="hljs-number">0</span>) &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>wrap(DepartmentResponseCodeConst.EXIST_EMPLOYEE);<br>    &#125;<br>    <span class="hljs-comment">// 操作数据库 4</span><br>    Long departmentSort = departmentEntity.get<span class="hljs-constructor">Sort()</span>;<br>    departmentEntity.set<span class="hljs-constructor">Sort(<span class="hljs-params">swapEntity</span>.<span class="hljs-params">getSort</span>()</span>);<br>    departmentDao.update<span class="hljs-constructor">ById(<span class="hljs-params">departmentEntity</span>)</span>;<br>    swapEntity.set<span class="hljs-constructor">Sort(<span class="hljs-params">departmentSort</span>)</span>;<br>    departmentDao.update<span class="hljs-constructor">ById(<span class="hljs-params">swapEntity</span>)</span>;<br>    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>succ<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码前三步都是使用 connection 进行验证操作，由于方法上有@Transactional 注解，所以这三个验证都是使用的同一个 connection。</p><p>若对于复杂业务、复杂的验证逻辑，会导致整个验证过程始终占用该 connection 连接，占用时间可能会很长，直至方法结束，connection 才会交还给数据库连接池。</p><p>对于复杂业务的不可预计的情况，长时间占用同一个 connection 连接不是好的事情，应该尽量缩短占用时间。</p><p>正例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DepartmentService</span>.</span></span>java<br><br>public ResponseDTO&lt;String&gt; up<span class="hljs-constructor">OrDown(Long <span class="hljs-params">departmentId</span>, Long <span class="hljs-params">swapId</span>)</span> &#123;<br>    DepartmentEntity departmentEntity = departmentDao.select<span class="hljs-constructor">ById(<span class="hljs-params">departmentId</span>)</span>;<br>    <span class="hljs-keyword">if</span> (departmentEntity<span class="hljs-operator"> == </span>null) &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>wrap(DepartmentResponseCodeConst.NOT_EXISTS);<br>    &#125;<br>    DepartmentEntity swapEntity = departmentDao.select<span class="hljs-constructor">ById(<span class="hljs-params">swapId</span>)</span>;<br>    <span class="hljs-keyword">if</span> (swapEntity<span class="hljs-operator"> == </span>null) &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>wrap(DepartmentResponseCodeConst.NOT_EXISTS);<br>    &#125;<br>    Long count = employeeDao.count<span class="hljs-constructor">ByDepartmentId(<span class="hljs-params">departmentId</span>)</span><br>    <span class="hljs-keyword">if</span> (count != null<span class="hljs-operator"> &amp;&amp; </span>count &gt; <span class="hljs-number">0</span>) &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>wrap(DepartmentResponseCodeConst.EXIST_EMPLOYEE);<br>    &#125;<br>    departmentManager.up<span class="hljs-constructor">OrDown(<span class="hljs-params">departmentSort</span>,<span class="hljs-params">swapEntity</span>)</span>;<br>    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>succ<span class="hljs-literal">()</span>;<br>&#125;<br><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DepartmentManager</span>.</span></span>java<br><br>@<span class="hljs-constructor">Transactional(<span class="hljs-params">rollbackFor</span> = Throwable.<span class="hljs-params">class</span>)</span><br>public void up<span class="hljs-constructor">OrDown(DepartmentEntity <span class="hljs-params">departmentEntity</span> ,DepartmentEntity <span class="hljs-params">swapEntity</span>)</span>&#123;<br>    Long departmentSort = departmentEntity.get<span class="hljs-constructor">Sort()</span>;<br>    departmentEntity.set<span class="hljs-constructor">Sort(<span class="hljs-params">swapEntity</span>.<span class="hljs-params">getSort</span>()</span>);<br>    departmentDao.update<span class="hljs-constructor">ById(<span class="hljs-params">departmentEntity</span>)</span>;<br>    swapEntity.set<span class="hljs-constructor">Sort(<span class="hljs-params">departmentSort</span>)</span>;<br>    departmentDao.update<span class="hljs-constructor">ById(<span class="hljs-params">swapEntity</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>将数据在 service 层准备好，然后传递给 manager 层，由 manager 层添加@Transactional 进行数据库操作。</p><p>3）需要注意的是：注解 <code>@Transactional</code> 事务在类的内部方法调用是不会生效的</p><p>反例：如果发生异常，saveData方法上的事务注解并不会起作用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">createOrder</span>(<span class="hljs-params">OrderCreateDTO createDTO</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveData</span>(createDTO);<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span>(rollbackFor = <span class="hljs-title class_">Throwable</span>.<span class="hljs-property">class</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">saveData</span>(<span class="hljs-params">OrderCreateDTO createDTO</span>)&#123;<br>        orderDao.<span class="hljs-title function_">insert</span>(createDTO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><em>Spring采用动态代理(AOP)实现对bean的管理和切片，它为我们的每个class生成一个代理对象。只有在代理对象之间进行调用时，可以触发切面逻辑。而在同一个class中，方法A调用方法B，调用的是原对象的方法，而不通过代理对象。所以Spring无法拦截到这次调用，也就无法通过注解保证事务了。简单来说，在同一个类中的方法调用，不会被方法拦截器拦截到，因此事务不会起作用。</em></p></blockquote><p>解决方案：</p><ol><li>可以将方法放入另一个类，如新增 <code>manager层</code>，通过spring注入，这样符合了在对象之间调用的条件。</li><li>启动类添加<code>@EnableAspectJAutoProxy(exposeProxy = true)</code>，方法内使用<code>AopContext.currentProxy()</code>获得代理类，使用事务。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SpringBootApplication</span>.</span></span>java<br><br>@<span class="hljs-constructor">EnableAspectJAutoProxy(<span class="hljs-params">exposeProxy</span> = <span class="hljs-params">true</span>)</span><br>@SpringBootApplication<br>public <span class="hljs-keyword">class</span> SpringBootApplication &#123;&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OrderService</span>.</span></span>java<br><br>public void create<span class="hljs-constructor">Order(OrderCreateDTO <span class="hljs-params">createDTO</span>)</span>&#123;<br>    OrderService orderService = (OrderService)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AopContext</span>.</span></span>current<span class="hljs-constructor">Proxy()</span>;<br>    orderService.save<span class="hljs-constructor">Data(<span class="hljs-params">createDTO</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4）service是具体的业务处理逻辑服务层，尽量避免将web层某些参数传递到service中。</p><p>反例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public ResponseDTO&lt;String&gt; handle<span class="hljs-constructor">PinganRequest(HttpServletRequest <span class="hljs-params">request</span>)</span>&#123;<br>    InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InputStreamReader(<span class="hljs-params">request</span>.<span class="hljs-params">getInputStream</span>()</span>, <span class="hljs-string">&quot;GBK&quot;</span>);<br>    BufferedReader reader = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedReader(<span class="hljs-params">inputStreamReader</span>)</span>;<br>    StringBuilder sb = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>    String str;<br>    <span class="hljs-keyword">while</span> ((str = reader.read<span class="hljs-constructor">Line()</span>) != null) &#123;<br>        sb.append(str);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>is<span class="hljs-constructor">Valid(<span class="hljs-params">msg</span>)</span>)&#123;<br>      return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ResponseDTO</span>.</span></span>wrap(ResponseCodeConst.ERROR_PARAM);<br>    &#125;<br>    PinganMsgDTO PinganMsgDTO = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">msg</span>,PinganMsgDTO.<span class="hljs-params">class</span>)</span>;<br>    <span class="hljs-comment">// 示例结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p>反例中出现的问题：</p><ul><li>反例中把 <code>HttpServletRequest</code> 传递到service中，是为了获取Request流中的字符信息，然后才是真正的业务处理。按照分层的初衷：将代码、业务逻辑解耦，正确的做法应该是<code>handlePinganRequest</code>方法将<code>String</code>字符作为参数直接处理业务，将从<code>Request</code>中获取字符的操作放入<code>controller</code>中。</li><li>另一个坏处是不方便做单元测试，还得一个<code>new</code>一个<code>HttpServletRequest</code>并制造一个<code>InputStream</code>，然而这样做并不能模拟到真实的业务情景及数据。</li></ul><h3 id="4、-manager-层规范"><a href="#4、-manager-层规范" class="headerlink" title="4、 manager 层规范"></a>4、 manager 层规范</h3><p>manager 层的作用(引自《阿里 java 手册》)：</p><ul><li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li><li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；</li><li>与 DAO 层交互，对多个 DAO 的组合复用。</li></ul><h3 id="5、-dao-层规范"><a href="#5、-dao-层规范" class="headerlink" title="5、 dao 层规范"></a>5、 dao 层规范</h3><p>优先使用 mybatis-plus 框架。如果需要多个数据源操作的，可以选择使用 SmartDb 框架。</p><p>1）所有 Dao 继承自 BaseMapper</p><p>2）禁止使用 Mybatis-plus 的 Wrapper 条件构建器</p><p>3）禁止直接在 mybatis xml 中写死常量，应从 dao 中传入到 xml 中</p><p>3）建议不要使用星号 <code>*</code> 代替所有字段</p><p>正例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    NoticeDao.java<br><br>    <span class="hljs-type">Integer</span> noticeCount(@Param(&quot;sendStatus&quot;) <span class="hljs-type">Integer</span> sendStatus);<br><span class="hljs-comment">---------------------------------------------</span><br>    NoticeMapper.xml<br><br>    &lt;<span class="hljs-keyword">select</span> id=&quot;noticeCount&quot; resultType=&quot;integer&quot;&gt;<br>        <span class="hljs-keyword">select</span><br>        count(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">from</span> t_notice<br>        <span class="hljs-keyword">where</span><br>        send_status = #&#123;sendStatus&#125;<br>    &lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    NoticeDao.java<br><br>    <span class="hljs-type">Integer</span> noticeCount();<br><span class="hljs-comment">---------------------------------------------</span><br>    NoticeMapper.xml<br><br>    &lt;<span class="hljs-keyword">select</span> id=&quot;noticeCount&quot; resultType=&quot;integer&quot;&gt;<br>        <span class="hljs-keyword">select</span><br>        count(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">from</span> t_notice<br>        <span class="hljs-keyword">where</span><br>        send_status = <span class="hljs-number">0</span><br>    &lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><p>3）dao层方法命名规范</p><ul><li>获取单个对象的方法用 <code>get</code> 做前缀。</li><li>获取多个对象的方法用 <code>list</code> 做前缀。</li><li>获取统计值的方法用 <code>count</code> 做前缀。</li><li>插入的方法用 <code>save/insert</code> 做前缀。</li><li>删除的方法用 <code>remove/delete</code> 做前缀。</li><li>修改的方法用 <code>update</code> 做前缀。</li></ul><p>建议：dao层方法命名尽量以sql语义命名，避免与业务关联。</p><p>正例：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs julia">List&lt;PerformanceDTO&gt; listByMonthAndItemId(<span class="hljs-meta">@Param</span>(<span class="hljs-string">&quot;month&quot;</span>) <span class="hljs-built_in">String</span> month, <span class="hljs-meta">@Param</span>(<span class="hljs-string">&quot;itemId&quot;</span>) <span class="hljs-built_in">Integer</span> itemId);<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs julia">List&lt;PerformanceDTO&gt; getInternalData(<span class="hljs-meta">@Param</span>(<span class="hljs-string">&quot;month&quot;</span>) <span class="hljs-built_in">String</span> month, <span class="hljs-meta">@Param</span>(<span class="hljs-string">&quot;itemId&quot;</span>) <span class="hljs-built_in">Integer</span> itemId);<br></code></pre></td></tr></table></figure><p>反例中出现的不规范操作：</p><ul><li>get代表单个查询，批量查询的应该 list 开头。</li><li>命名与业务关联，局限了dao方法的使用场景和范围，降低了方法的复用性，造成他人困惑以及重复造轮子。</li></ul><h3 id="6、boolean类型的属性命名规范"><a href="#6、boolean类型的属性命名规范" class="headerlink" title="6、boolean类型的属性命名规范"></a>6、boolean类型的属性命名规范</h3><blockquote><p>类中布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 Boolean isDeleted；的属性，它的方法也是 isDeleted()，RPC在反向解析的时候，“以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p></blockquote><p>这是阿里巴巴开发手册中的原文，我们团队的规定是：<code>boolean</code> 类型的类属性和数据表字段都统一使用 <code>flag</code> 结尾。虽然使用 <code>isDeleted，is_deleted</code> 从字面语义上更直观，但是比起可能出现的潜在错误，这点牺牲还是值得的。</p><p>正例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">deletedFlag，deleted_flag，onlineFlag，online_flag<br></code></pre></td></tr></table></figure><h3 id="7、"><a href="#7、" class="headerlink" title="7、"></a>7、</h3><h2 id="四、数据库-规范"><a href="#四、数据库-规范" class="headerlink" title="四、数据库 规范"></a>四、数据库 规范</h2><h3 id="1-建表规范"><a href="#1-建表规范" class="headerlink" title="1 建表规范"></a>1 建表规范</h3><p>表必备三字段：id, create_time, update_time</p><ul><li>id 字段 Long 类型，单表自增，自增长度为 1</li><li>create_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP</li><li>update_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP, On update CURRENT_TIMESTAMP</li></ul><h3 id="2-枚举类表字段注释需要将所有枚举含义进行注释"><a href="#2-枚举类表字段注释需要将所有枚举含义进行注释" class="headerlink" title="2 枚举类表字段注释需要将所有枚举含义进行注释"></a>2 枚举类表字段注释需要将所有枚举含义进行注释</h3><p>修改或增加字段的状态描述，必须要及时同步更新注释。<br>如下表的 <code>sync_status</code> 字段 <code>同步状态 0 未开始 1同步中 2同步成功 3失败</code>。</p><p>正例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_change_data` (<br>`id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`sync_status` TINYINT(<span class="hljs-number">3</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;同步状态 0 未开始 1同步中 2同步成功 3失败&#x27;</span>,<br>`sync_time` DATETIME <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;同步时间&#x27;</span>,<br>`create_time` DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>`update_time` DATETIME <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br><span class="hljs-keyword">PRIMARY KEY</span> (`change_data_id`)<br>)<br></code></pre></td></tr></table></figure><p>反例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_change_data` (<br>`id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`sync_status` TINYINT(<span class="hljs-number">3</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;同步状态 &#x27;</span>,<br>`sync_time` DATETIME <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;同步时间&#x27;</span>,<br>`create_time` DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>`update_time` DATETIME <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br><span class="hljs-keyword">PRIMARY KEY</span> (`change_data_id`)<br>)<br></code></pre></td></tr></table></figure><h3 id="3-合理结合业务给表字段添加索引和唯一索引"><a href="#3-合理结合业务给表字段添加索引和唯一索引" class="headerlink" title="3 合理结合业务给表字段添加索引和唯一索引"></a>3 合理结合业务给表字段添加索引和唯一索引</h3><p>具体索引规范请参照《阿里巴巴 Java 开发手册》索引规约</p><h2 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h2><h3 id="1、代码提交规范"><a href="#1、代码提交规范" class="headerlink" title="1、代码提交规范"></a>1、代码提交规范</h3><ul><li>提交前应该冷静、仔细检查一下，确保没有忘记加入版本控制或不应该提交的文件。</li><li>提交前应该先编译一次（idea里ctrl+F9），防止出现编译都报错的情况。</li><li>提交前先更新pull一次代码，提交前发生冲突要比提交后发生冲突容易解决的多。</li><li>提交前检查代码是否格式化，是否符合代码规范，无用的包引入、变量是否清除等等。</li><li>提交时检查注释是否准确简洁的表达出了本次提交的内容。</li><li>提交代码时必须填写详细备注，如完成功能，注释为“新增XX功能”；</li><li>若此次提交代码对应禅道中的任务或者bug，格式如下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">task#<span class="hljs-selector-attr">[任务id]</span> <span class="hljs-selector-attr">[任务标题]</span> <span class="hljs-selector-attr">[具体事项]</span><br>bug#<span class="hljs-selector-attr">[bug id]</span> <span class="hljs-selector-attr">[bug标题]</span> <span class="hljs-selector-attr">[具体事项]</span><br></code></pre></td></tr></table></figure><ul><li>例子如下：</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">task<span class="hljs-meta">#1101 开发smartreload功能 完成线程池的编码</span><br>bug<span class="hljs-meta">#1102 smartreload时间不正确 线程池的大小问题</span><br></code></pre></td></tr></table></figure><h3 id="2、maven项目"><a href="#2、maven项目" class="headerlink" title="2、maven项目"></a>2、maven项目</h3><ul><li>pom禁止出现相同 groupId，artifactId 的依赖配置。</li><li>项目名称应该与 artifactId 保持一致。</li><li>定期检查jar包依赖关系，及时排除解决冲突的jar包。</li></ul><h3 id="3、保持项目整洁"><a href="#3、保持项目整洁" class="headerlink" title="3、保持项目整洁"></a>3、保持项目整洁</h3><p>使用git，必须添加 .gitignore 忽略配置文件。<br>不要提交与项目无关的内容文件：idea配置、target包等。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>代码规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用</title>
    <link href="/2023/04/25/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/25/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><p>常用命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span><br><br>git commit <br><br>git pull <br><br>git push<br><br>git status<br><br>git checkout              切换分支<br><br>git branch                 创建分支<br><br>git remote <span class="hljs-built_in">add</span>          链接远程仓库<br><br>git merge                   合并分支<br><br></code></pre></td></tr></table></figure><h4 id="Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（一）"><a href="#Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（一）" class="headerlink" title="Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（一）"></a>Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（一）</h4><p>   git add&#x2F; git commit &#x2F; git pull &#x2F; git push&#x2F;git status 这些命令应该是用的最多的了，具体的我就不说了。下面来针对分支branch和远程服务器remote进行一些讲解，让大家理解一下Git在项目管理上的结构，进而才能明白我们在做什么，遇到问题了该怎么分析怎么解决。</p><p>   如果我们使用Git Bash进入一个目录（比如：D：&#x2F;test&#x2F;），在这个目录下执行git init命令，就会在这个目录建立一个Repository（仓库），这个仓库就是我们被Git管理的仓库了，如果你在这个目录下做什么操作，都是可以通过Git进行管理的。比如你新建了一个文件TestFile.txt，那么通过git add TestFile.txt 命令就可以把这个文件加入Git 的暂存区，再通过git commit -m “增加一个文件TestFile.txt”  命令就能够彻底将这个文件纳入Git管理了。</p><p>   那么branch（分支）是什么呢？其实大家可以理解成一种科幻电影里的“平行世界”。当建立一个Repository后，Git会默认为我们建立一个master分支的，我们默认的是在这个名字叫做master的分支上进行操作。当然，我们可以通过git branch testbranch 命令建立一个名字叫做testbranch的分支，这个分支是基于你当前的分支创建的，也就是说，你当前如果处于master分支的话，如果你建立了testbranch分支，那么testbranch分支里的内容会和你在master分支里commit进去的内容是一样的，testbranch里同样会有刚才我commit进的TestFile.txt文件。我们可以通过git checkout master和git checkout testbranch命令在两个分支上来回切换，切到哪个分支上你的文件目录就会变成哪个分支上的内容。（git checkout -b testbranch2 命令相当于git branch testbranch2 + git checkout testbranch2两个命令，后面这些花哨的命令我就不再赘述了，等读者慢慢熟悉了Git后自然会接触到更多像这样的命令）。</p><p>   上面讲的分支的概念一定要理解清楚，因为这是理解git pull和git push 的基础。大家可以发现，在之前的讲解中，并没有涉及到git pull和git push，那是因为我们一直在一个仓库Repository中进行操作，我们在自己管理自己的项目。如果涉及到多人管理，也就是我们要管理别人的项目或者公司的项目的时候，就会涉及到别人的Repository了。在这里，希望读者们把公司的Repository（GitLab上的或者Stash上的等等）当做和自己电脑上的Repository一样看待，没有太多特别的。</p><p>   那么现在就涉及到两个Repository的协调了。为了避免直接讲解太复杂的内容，下面我就一个比较简单的场景进行讲解，复杂的等读者熟悉得差不多后再说。场景如下，远程（公司）的服务器上有个仓库Repository，这个项目包含了一个master分支，一个TestA分支，一个TestB分支。我们开发项目时，在自己电脑上直接把项目clone到本地，那么我们的电脑上也会出现一个同样的Repository，同样包括一个master分支，一个TestA分支，一个TestB分支。现在大家心里就应该明确一点：你目前能了解到的已经有6个分支了，远程有三个，你本地也有三个。为了方便区分，后面我会把本地分支后面加一个（L）。那么当我们使用git checkout master命令的时候，其实我们是在本地切换到了master(L)分支上，要记住哦，我们是不可能切换到远程上的分支的哦，那不是你的Repository~很多人就是因为这些没有区分出来，导致了自己都不知道自己在做什么，只是稀里糊涂的有个简单的git pull和git push概念。</p><p>   下面就轮到git pull 和git push出场了。如果我们git checkout TestA之后会切换到TestA(L)分支上，如果我们做了一些改动，git add和git commit之后，意思是讲这些改动提交到了TestA(L)分支中，而远程的TestA分支还是原来的那个样子，如果你想让远程的TestA分支也变成你改动之后的样子，那就会用到git push命令了。当然这里是不出意外的情况，因为大概是在1.9.2之后的Git版本中，Git默认的push方式改成了simple方式，个人比较建议这种方式（即从哪里pull过来，我就push回哪里去）。可以通过命令git config push.default查看你当前的push方式，可以通过git config –global push.default simple命令把你全局的push方式设置成simple方式的。其它方式读者可以自行搜索在此不再赘述。所以总结一下，一般情况下，如果你checkout到了TestA(L)分支上执行git pull命令，就会把远程Repository中TestA分支中的内容更新到你本地的TestA(L)分支中；push命令同理。</p><p>   好了太晚了，今天就先讲到这里。后文提醒一下自己，讲解一下remote方面的内容以及merge相关的内容，这些内容都是在项目中非常重要的动作与概念，希望大家要搞清楚。最后可能还会讲解一些CodeReview相关的内容以及在Git使用过程中比较常出现的一些零散的但是却很关键的问题。相信大家如果按照顺序了解了前几篇文章之后，最后看到那些问题自己就可以分析出原因与解决方案了。</p><ul><li><h4 id="Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（二）"><a href="#Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（二）" class="headerlink" title="Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（二）"></a>Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（二）</h4><p>本篇将会主要讲解一下remote和merge相关，读者理解以后则可以开始了解所谓的Merge Request流程（当然这个流程还有很多叫法~）。</p><p>上一篇已经讲到，remote即远程。比如你公司使用Stash管理项目时，你们公司的Stash服务器就是你的remote端；比如你使用Github管理自己的项目时，Github端就是你的remote端。其实你的本地库Repository可以同时对应到很多remote端的哦<del>也就是说你可以把你本地的库push到任何几个你有权限的remote端！这一点amazing，但是一开始不建议大家这么做，等以后越来越熟悉了再涉足这方面省着出乱子</del>下面就先对一个本地库对应到一个remote端来进行分析。</p><p>就Github进行举例吧，如果我们要在Github这个服务器上维护一个自己的项目，或者叫Repository，其实有两种方法可以实现，下面就来一一介绍流程及原理：</p><p>统一的起始步骤：</p><p>我们在Github上用自己的账号新建一个Repository（这个步骤直接上Github按照说明做，简单的几步操作即可完成），建立完成后Github会给我们一个地址（这里的地址其实有两种，一种是SSH的一种是HTTPS的，建议大家直接用HTTPS的比较方便），如<a href="https://balabala/testproject%E3%80%82%E6%AD%A4%E5%90%8E%E5%B0%B1%E4%BB%A3%E8%A1%A8Github%E5%B7%B2%E7%BB%8F%E4%B8%BA%E4%BD%A0%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%BC%80%E8%BE%9F%E4%BA%86%E4%B8%80%E4%B8%AARepository%EF%BC%8C%E8%80%8C%E9%82%A3%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%B0%B1%E6%98%AF%E6%8C%87%E5%90%91%E8%BF%99%E4%B8%AARepository%E7%9A%84%E3%80%82%E6%98%BE%E7%84%B6%EF%BC%8C%E7%9B%AE%E5%89%8D%E8%BF%99%E4%B8%AARepository%E8%BF%98%E6%98%AF%E4%B8%AA%E7%A9%BA%E7%9A%84%E5%BA%93%EF%BC%8C%E9%87%8C%E9%9D%A2%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF%E9%83%BD%E6%B2%A1%E6%9C%89%EF%BC%8C%E9%A1%B6%E5%A4%9A%E6%9C%89%E4%B8%AA%E8%AF%B4%E6%98%8E%E6%96%87%E4%BB%B6README%E3%80%82">https://balabala/testproject。此后就代表Github已经为你在服务器端开辟了一个Repository，而那个地址就是指向这个Repository的。显然，目前这个Repository还是个空的库，里面什么东西都没有，顶多有个说明文件README。</a></p><p>现在的进度大家明确一下：我们仅仅是在服务器上有了一个空仓库，而我们的本地还什么都没做什么都没有。</p><p>而我们要实现的状态是：在服务器上的仓库中有我们的项目，在我们本地也有一份同样的项目，并且两者是相互“关联”的（即我们如果pull则能从这个服务器上拉数据下来，如果push则能把本地数据推到这个服务器的这个仓库中去）。</p><p>下面就要分两种方法了：</p><p>第一种方法：</p><p>用Git Bash打开并进入一个目录，使用Git clone <a href="https://balabala/testproject">https://balabala/testproject</a> 命令将Github上的仓库“克隆”下来，就在当前目录。这个过程其实从整体上做了两类事情：1.在当前目录下建立Repository库，将Github上的testproject库中的文件下载下来并按部就班地部署到本地Repository库中；2.既然是clone下来的，那么“自然而然”地就会产生了关联。即本地Repository与Github上的Repository已经产生了联系，我们不管是git pull命令还是git push命令都会互相找到对方。我们不必了解到底发生了什么，这里涉及到的原理会在第二种方法中彻底帮大家解读。</p><p>不要忘了现在不管是本地还是remote都是空项目呢，里面基本没什么东西。那么下一步就是去我们事先已经有了的项目目录，将我们要管理的文件内容拷贝到本地当前的目录下，然后git add进所有要管理的文件，再git commit进所有的文件。现在是不是我们所有想管理的文件都已经在本地纳入了Git的管理了？我们本地的Repository库已经内容丰富了！下一步就是git push啦，将本地Repository里所有新的内容都推到Github服务器上去，这样不管是本地还是remote都已经达到了我们想要的状态了。</p><p>上面这个方法同时也是很多新人喜欢的方法。弊端有两个：1是这样很表层，我们很难理解底层到底做了什么，我们为什么这样做，一旦出了问题我们就瞎眼了。2.这样做会对我们的项目文件来回迁移，再import进IDE，这样的迁移成本比较高而且相当相当没必要！！！为什么我们因为对Git工具的不理解而做工具的奴隶呢？我们要了解正在使用的工具，让工具屈服于我们才对啊！</p><p>第二种方法：</p><p>直接用Git Bash进入我们事先已经有了的IDE正在指向的项目目录，这个目录下有我们要管理的所有文件。使用git init命令，直接在当前目录下建立Repository进行项目管理，然后把所有需要管理的文件git add然后git commit进来。这时候我们本地就有了饱满的Repository，与我们的目标唯一的区别就是我们本地的饱满的Repository和Github上的空Repository完全没有关系。</p><p>怎么建立联系呢？git remote add myGithubRemote <a href="https://balabala/testproject">https://balabala/testproject</a> 命令就OK了！这个命令的意思就是，我们本地的Repository定义了一个名字叫做myGithubRemote的remote端，这个remote端指向的是<a href="https://balabala/testproject%E5%9C%B0%E5%9D%80%E4%B8%8A%E7%9A%84%E8%BF%9C%E7%A8%8BRepository%E3%80%82%E6%AD%A4%E6%97%B6%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%94%A8git">https://balabala/testproject地址上的远程Repository。此时你可以用git</a> remote -v 命令查看一下我们的remote状态，在结果信息里就可以看到了myGithubRemote 和 <a href="https://balabala/testproject">https://balabala/testproject</a> 的对应关系。简单情况下，这时我们在执行git push命令时Git就知道应该把数据推到哪里了，就是myGithubRemote对应的<a href="https://balabala/testproject%E5%9C%B0%E5%9D%80%E7%9A%84%E4%BB%93%E5%BA%93%E3%80%82%E5%BD%93%E6%88%91%E4%BB%ACpush%E5%AE%8C%E6%AF%95%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%B0%B1%E5%B7%B2%E7%BB%8F%E8%BE%BE%E5%88%B0%E4%BA%86%E7%9B%AE%E6%A0%87%E7%8A%B6%E6%80%81%EF%BC%8C%E8%80%8C%E4%B8%94%E4%B8%8D%E7%94%A8%E5%81%9A%E4%BB%80%E4%B9%88%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E3%80%82%E4%BA%86%E8%A7%A3%E4%BA%86%E8%BF%99%E4%BA%9B%E4%B9%8B%E5%90%8E%EF%BC%8C%E4%B8%8D%E9%9A%BE%E7%8C%9C%E6%B5%8B%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E4%B8%ADgit">https://balabala/testproject地址的仓库。当我们push完毕之后，就已经达到了目标状态，而且不用做什么文件迁移。了解了这些之后，不难猜测第一种方法中git</a> clone的第二类操作到底做了什么，其实Git就是默认为我们git remote add origin <a href="https://balabala/testproject%E4%BA%86%EF%BC%8CGit%E9%BB%98%E8%AE%A4%E7%BB%99%E6%88%91%E4%BB%AC%E5%BB%BA%E7%AB%8B%E4%BA%86%E8%BF%99%E4%B8%AA%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB%EF%BC%8C%E5%B9%B6%E4%B8%94%E7%BB%99%E8%BF%99%E4%B8%AA%E8%BF%9C%E7%A8%8B%E5%BA%93%E8%B5%B7%E5%90%8D%E5%8F%ABorigin%EF%BC%81%E8%BF%99%E4%B8%AAorigin%E5%B0%B1%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E5%AE%9A%E4%B9%89%E7%9A%84%E9%82%A3%E4%B8%AAmyGithubRemote">https://balabala/testproject了，Git默认给我们建立了这个对应关系，并且给这个远程库起名叫origin！这个origin就相当于我们自己定义的那个myGithubRemote</a>~</p><p>这里的目的不是为了手把手教大家如何操作，而是为了让大家明白原理，所以，为了尽快地说明原理，很多细节小编就没有赘述。具体细节小编建议，自己思考着原理，亲自去实践几遍，到时候收货才会更大。</p></li><li><h4 id="Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（三）"><a href="#Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（三）" class="headerlink" title="Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（三）"></a>Git使用入门，使用原理解读及如何在GitLab、GitHub或者Stash上管理项目（三）</h4><p>上一篇讲了remote相关，让大家基本了解了一下远端库与本地库之间的联系。目前我认为还剩下的容易造成理解混乱的是merge命令以及merge动作的应用场景，下面详述。</p><p>首先先给大家解释merge本身的一些内容，再结合一些场景帮大家从混乱的理解中找到思路，进而完全理解Merge Request的意思并掌握这项技能。</p><p>merge译成中文是合并，顾名思义，git merge命令时用来合并的，而合并的对象就是branch（分支）。下面我举个简单的应用场景（只在本地Repository中）来说明：本地库中有两个分支testBranch1和testBranch2。目前两个分支中的文件内容相同，都只有一个fileA.txt文件，而且fileA.txt的内容只有一行文字：HelloWorld!</p><p>如果你目前处于testBranch1，并且修改了fileA.txt文件在第二行增加了一句：Hello! </p><p>此时你的fileA.txt形如：</p><p>HelloWorld!</p><p>Hello!</p><p>不仅如此，你还新建了另一个空文件fileB.txt，并且把所有的修改commit进来。</p><p>然后checkout到testBranch2上，此时testBranch2上应该只有一个fileA.txt文件而且内容只有一行HelloWorld! 此时你又修改了fileA.txt在第二行增加了一句HaHa! ，并且把所有的修改都commit进来。</p><p>此时你的fileA.txt形如：</p><p>HelloWorld!</p><p>HaHa!</p><p>现在可以想象，testBranch1和testBranch2两个分支分别管理着两套不同版本的内容了。前者有两个文件，后者只有一个文件，而且名字相同的文件内容也有所差别。好了git merge命令马上要出场了，下面请特别注意小编介绍的两个场景：</p><p>场景1：</p><p>git checkout testBranch1 （即切换到testBranch1分支上），执行git merge testBranch2命令。这样代表：站在testBranch1分支上，把testBranch2分支上的内容融合到testBranch1分支上来。</p><p>这样git会尝试把testBranch2中的内容与testBranch1融合，而这样是不会改变testBranch2分支上的内容的，只会改变testBranch1上的内容。所以此后testBranch1上有两个文件（fileA.txt和fileB.txt），而testBranch2上依然只有1个文件（filtA.txt）</p><p>场景2：</p><p>git checkout testBranch2 (即切换到testBranch2分支上)，执行git merge testBranch1 命令。这样代表站在testBranch2分支上，把testBranch1分支上的内容融合到testBranch2分支上来。</p><p>这样git会尝试把testBranch1中的内容与testBranch2融合，而这样是不会改变testBranch1分支上的内容的，只会改变testBranch2上的内容。所以此后testBranch1上有两个文件（fileA.txt和fileB.txt），而testBranch2上也有了2个文件（fileA.txt和fileB.txt）</p><p>场景1和场景2在整体上的变化大家明白以后应该就能理解merge命令的含义了吧？下面说一下另一个细节</p><p>相信大家注意到，如果第一个分支的fileA.txt和第二个分支的fileA.txt进行融合的话，是有可能产生歧义的。前者的第二行希望是Hello!，后者的第二行希望是HaHa!  那么最终结果到底听谁的呢？这种情况下Git就“有可能产生冲突”。那么在merge 过程中产生冲突是怎样的效果呢？此时你的fileA.txt可能会呈现类似以下的中间状态（此时以场景1的情况为例）：</p><p>HelloWorld!</p><blockquote></blockquote><p>Hello!</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>Haha!</p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</p><p>类似这样的状态代表Git说：我糊涂了。就需要我们人工来解决这样的冲突。此时我们可以打开fileA.txt文件，发现内容可能如上所示。解决时我们会想：Hello!是我在操作testBranch1时想加的话，HaHa!是我在操作testBranch2是想加的话。两个我都想保存下来，那稍微编辑一下就想搞成如下形式：</p><p>HelloWorld!</p><p>Hello!</p><p>HaHa!</p><p>这样解决冲突（即人为编辑）完成后我们保存并关闭文件。</p><p>注意！此时我们仍然处于merge的“过程中”，要想完成merge必须告诉Git：刚才冲突的文件就按照我刚才保存的这样解决！  怎么告诉Git呢？就是git add fileA.txt然后git commit -m “解决fileA文件的冲突问题” 两个命令。说白了就是再把最新的fileA.txt文件加入Git的管理。</p><p>这些都做完之后，我们就已经渡过了merge过程回家包饺子了。</p><p>这里需要理解一个Git的底层原理，这里称其为原理111：在将testBranch2分支merge到testBranch1分支中时，我们像上面那样解决fileA.txt文件的冲突。这样Git就“知道了”上面这个冲突的解决办法，即用形如：</p><p>HelloWorld!</p><p>Hello!</p><p>HaHa!</p><p>的内容来替换冲突文件中的内容（因为这是刚才主人决定的）。那么如果此后再将testBranch1分支merge到testBranch2分支中时，我们就不必要再手动解决冲突了，因为Git已经知道该怎么做了。</p><p>这个原理会在后面的remote中得到应用，所以希望读者在此能够理解到位。</p><p>好了分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>下面就来讲解一下什么是Merge Request以及怎么进行合理的Merge Request</p><p>举一个比较简单的场景：</p><p>你们公司的服务器是Stash，上面有个正在开发的项目：ComRepository。这个项目有三个分支：master，worker1，worker2。那么如果把这个项目clone下来之后，本地也会有三个分支：master, worker1, worker2。现在心里要清楚哦，如小编第一篇文章所说，你所知道的是有6个分支的哦，服务器上3个，你本地3个。而对于公司来说，他们不在乎每个员工本地的分支是怎样，他们只在乎服务器上的master分支是否运转正常。因为服务器上的master分支有可能就是公司发表项目时用的分支，所以这个分支上的代码至关重要！</p><p>此时公司要求你就在worker1分支上开发吧！那么你的开发流程是什么呢？总之最终目的是要让服务器上的master分支有你开发好的代码。</p><p>为了方便，后面依然把本地分支带上后缀（L），如worker1（L）。</p><p>一种思路：</p><p>在worker1(L)分支上开发，然后checkout到master(L)上，将worker1(L)分支merge到master(L)上来，然后将master(L)的新代码push到服务器的master上去。</p><p>这种思路是不该推荐的，如果我是老大，我是不会给你分配master分支的push权限的。因为这样太危险了，master分支是公司至关重要的分支，岂能让你说push就push？这样会让公司的master上的代码时刻处于危险之中。</p><p>第二种思路：</p><p>就是Merge Request的思路。我们每个开发人员都没有master分支的push权限，但是有pull权限。即只能看，不能写。但是我们有其它分支（如worker1和worker2）的pull和push权限，反正这两个分支也不是太重要的分支，开发者爱怎么糟蹋怎么糟蹋。</p><p>那么怎么才能让服务器上的master分支得到更新呢？就是在服务器上进行merge动作，即将服务器上的worker1或者worker2分支上的内容merge到master分支上。这个过程就是Merge Request！所以服务器上的merge动作不是靠你本地git merge命令来完成的，因为你只能操作你本地的分支，服务器上的分支你八竿子打不着，怎么可能轻易去“命令它”？所以这个merge动作基本上是在你们服务器的网页上进行的。比如：你在公司服务器的网站上，发起一个Merge Request，请求把服务器上的worker1分支merge到master分支上去，请求发起要添加一些审核人物，譬如你的老板你的同事。当他们接收到这个Merge Request并同意后，可能会有个“同意”之类的按钮，点击之后就会在服务器上把worker1分支merge到master中。这样做就有效地保护了master分支的安全性。</p><p>服务器上的worker1分支的更新就是靠你在本地worker1(L)上更新后push上去的。所以简单的流程就是你早上来上班了，在worker1(L)分支上开发了一天，然后把工作内容都push到服务器的worker1分支上去，再发起一个Merge Request请求把服务器上的worker1分支merge到master上去，然后下班。</p><p>分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>以上就是结合remote和branch来讲解的Merge Request。读者了解之后，可以学习一下下面的非常重要的内容：</p><p>试想一下：如果你请求worker1往master上merge，我请求worker2也往master上merge。那么久而久之，我们有可能都改了同一个文件，就可能会产生冲突。那样的话master分支上岂不是乱七八糟了？那么怎么才能让master上的分支一直正确，不产生冲突呢？</p><p>下面我先说下流程：比如你是在worker1(L)分支上的开发者，做完了一天的工作，先不要提Merge Request，而是先checkout到master(L)上，pull一下，把服务器上master的代码拉下来，是本地的master(L)是最新的master代码，然后checkout回worker1(L)分支，将master(L)分支merge到worker1(L)上，这时候就有可能发生冲突了，因为可能在你下班之前，worker2分支的同事已经提交了代码并且更新了master，而你们恰巧修改了同一个文件。这时候冲突了不要紧，因为冲突是发生在你本地的，你只要在本地把冲突解决了，然后push到worker1分支上去，再提Merge Request，就不会使服务器上的master产生代码冲突了。</p><p>原因相信聪明的你已经明白，就是上面提到的原理111 。因为你在本地解决冲突的时候，Git就已经知道产生冲突以后该怎么做了，而你又把这些脚本push到了服务器的worker1分支上，那么服务器的worker1分支在往master分支合并的时候自然就知道该怎么做了。怎么样，Git强大吧？</p><p>顺便再建议一下，当你早上来上班时，尽量也checkout到master(L)，pull一下，再checkout回worker1(L)，把master(L)分支的内容merge过来，完成之后再进行开发。这样就是尽量保持在昨晚之后的最新的代码上进行开发，以减少产生冲突的可能性嘛~</p></li><li><h4 id="Git原理杂谈之pull-x2F-push命令"><a href="#Git原理杂谈之pull-x2F-push命令" class="headerlink" title="Git原理杂谈之pull&#x2F;push命令"></a>Git原理杂谈之pull&#x2F;push命令</h4><p>好了废话不多说了，直接进入今天的主题——git push&#x2F; git pull命令。</p><p>也许很多人会轻视这两个最常见且高频使用的命令，这有什么可讲的？没错，如果项目没有出问题的情况下，我们大可不必关心这两个命令的原理及涉及到的所有细节，直接使它们喽~但是一旦项目出了什么小问题，使项目管理稍微脱离了“正常”流程，如果不了解这两个命令的话，大部分都容易傻眼。</p><p>续之前几篇的风格，小编先从偏表层讲清楚一些原理，等消化后再进一步讲解内部的细节原理。（PS：了解了各层次的原理后才能遇到问题都能理智地分析并解决掉问题）</p><p>Upstream：这个概念虽然不官方，但也非纯粹小编自造，希望大家首先了解一下。心存感激，如果当我们上来就能够顺利使用git push（git pull同理，后文尽量只拿一个来讲）命令就能实现推送数据到服务器上的时候，我们是幸运的。因为有幸在一些底层的未知设置下我们才能够简单地使用git push命令。其实，如果稍微写全面一点的话，很有可能我们的命令是像这样的：git push origin master。origin是远程端代名词（前几篇有讲解），master是这个远程端的一个分支名。所以这句命令的意思可以理解成“推送我的数据到origin端的master分支上去”。为什么很多时候，我们根本没有写这么全，也能够实现呢？而且刚才的解释也没有说明：把什么数据哪里的数据推送上去？ 所以通过这些问题的引入，希望读者们能够开始进行思考问题并去了解其内在的原理。这里可以引入一个upstream的概念。可以将upstream理解成一个通道，它用于连接你本地的一个分支和远程的某个分支。</p><p>比如远程库A上有3个分支branch1、branch2、branch3。远程库B上有3个分支branchx、branchy、branchz。本地仓库有2个分支local1和local2。那么当初始状态时，local1和local2和任何一个分支都没有关联，也就是没有upstream。当通过git branch –set-upstream-to&#x3D;A&#x2F;branch1 local1命令执行后，会给local1和branch1两个分支建立关联，也就是说local1的upstream指向的是branch1。这样的好处就是在local1分支上执行git push（git pull同理）操作时不用附加其它参数，Git就会自动将local1分支上的内容push到branch1上去。同样，local2分支也可以和远程库A和远程库B上的任何一个分支建立关联，只要给local2分支设置了upstream，就可以在local2分支上用git push（git pull同理）方便地与目标分支推拉数据。综上所述，upstream与有几个远程库没有关系，它是分支与分支之间的流通道。<br>再来说说git push -u和git branch –set-upstream-to&#x3D;指令之间的区别。<br>举个例子：我要把本地分支master与远程仓库origin里的分支gaga建立关联。<br>（如果使用下列途径1的话，首先，你要切换到master分支上（git checkout master））<br>两个途径：1. git push -u origin gaga 2. git branch –set-upstream-to&#x3D;origin&#x2F;gaga master<br>这两种方式都可以达到目的。但是1方法更通用，因为你的远程库有可能并没有gaga分支，这种情况下你用2方法就不可行，连目标分支都不存在，怎么进行关联呢？所以可以总结一下：git push -u origin gaga 相当于 git push origin gaga + git branch –set-upstream-to&#x3D;origin&#x2F;gaga master</p><p>讲到这里，希望大家在使用简单的git push命令时，心里要有个upstream的概念，而且一旦遇到了本地分支没有设置upstream时可以一眼看出并顺利解决。</p><p>番外篇：来说说一个比较关键的题外话git config –global push.default simple命令。因为这个命令是在电脑上安装完后小编建议大家就须要设置的一个指令</p><p>这句命令的意思是“把push命令的全局默认模式设置成：simple”。当然，你也可以设置成其它模式（如：matching），当然小编不建议，后文详解。</p><p>由此可以联想到也可以git config –global pull.default simple来给pull动作也设置一下，后文就不再点出。</p><p>simple模式：说白了就是从哪里来到哪里去。一个简单的例子就会明白：如果我的本地分支branchA是从origin端的branchA分支上pull下来的，那么在simple模式下，以后我再站在branchA这个本地分支上执行git push命令时，Git就会自动把我本地branchA上更新的内容推到origin端的branchA分支上去。现在就不难推断，为什么有时候，我们什么都没设置，上来就用git push就能够达到目的而没有被老大骂？因为你的Git版本的默认push.default是simple模式，而且在你来入职的时候，公司远程服务器上已经为你准备好了属于你的分支branchA，而当你把公司远程库给clone下来的时候，因为simple的模式设置，当你切(checkout)到你本地的branchA分支时，Git就已经知道你本地的这个branchA分支来自何方，而且它也知道该把你的数据推向何方了(这里读者可以把upstream的概念思考进来，就能够明白其实Git是通过设置upstream来实现simple这个模式的功能的)。这样就会导致很多用户上来就可以无脑地使用git pull和git push了。</p><p>matching模式：这个模式小编了解不是特别特别详细，可能就是通过分支名称进行匹配。举个例子，如果你的远程分支上有两个分支：branch1和branch2。你的本地分支上有三个分支branch1和branch2和branch3。那么再matching模式下，不管你站在哪个分支上执行git push时，Git都会寻找本地与远程分支名称相同的分支并且全部进行推送数据。所以小编觉得这个模式很危险，不建议大家使用。</p><p>可见，还是simple模式比较实用，站在哪个分支上就操作哪个分支，不会出乱子。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>上面的浅层操作与原理理解后，相信已经可以解决很大部分读者的疑惑了，下面开始讲解一下内在的一些原理，以便对以后要讲的原理做铺垫。</p><p>相信如果问git pull &#x3D; git fetch + git merge 对不对？很多人都会说没错呀！</p><p>其实没错当然是没错。也许你会知道，git fetch是获取服务器上的数据，git merge是将数据合并，所以git pull就是获取数据加合并数据的意思。</p><p>那么：fetch的是什么数据？fetch后的数据在哪里？如果不执行git merge它们是不是丢了？git merge 是谁跟谁合并？</p><p>为减少篇幅，下面以simple模式下并且只有一个远程库的情景进行分析。</p><p>举个例子：你公司的服务器上有一个分支名字是feature（以后标识成feature(R)），你在clone到本地的库的本地feature(以后标识成feature(L))分支上开发。那么如果在你clone之前远程就有feature(R)的话那么你在本地的feature(L)上开发时使用git push命令就会“自动”将feature(L)的改动推送到feature(R)上。外层原理上文已经说过了，就是stream的理论。但是实际上运作原理却很微妙。</p><p>不妨执行以下git branch -a命令。这个命令的含义是展示所有的分支。譬如类似于下图的情况：</p><p><img src="https://gitee.com/mimimao12/pic/raw/master/20150602150510181" alt="img"></p><p>可以看到三类分支名称：</p><p>1.上半部分的白色分支：这部分分支就是本地分支，上述的feature(L)就属于这类分支；（主意绿色的dev_0430左边的*号代表我当前HEAD所处的分支，即目前切换到的分支）</p><p>2.下半部分的以remotes开头的红色分支：指向远程分支的指针（为了便于理解，就把它们当成远程分支的内容在本地的临时复制品）。这是一个十分重要的概念，后文详述。</p><p>3.远程分支：即上图红色分支第一行右边的白色分支名：origin&#x2F;develop。 这个就代表的远程服务器上的分支，上文提到的feature(R)就属于这个概念。</p><p>这样理解的话，目前认知的就有三种类型的分支了，feature(L) feature(R)还有以remotes开头的分支（如：remotes&#x2F;origin&#x2F;feature，后文简称为feature(T)）。其实feature(L)和feature(R)从技术实现上根本没有任何交集，它们之间的关联全是通过feature(T)这个桥梁实现的。其实在feature(L)上执行了git fetch命令后，Git会把feature(R)上的改动下载到本地更新到feature(T)分支上，如果此后不执行git merge的话，那么你的feature(L)和feature(T)就会存在差异，只有执行了git merge命令后才会把feature(T)中的内容合并到feature(L)中。</p><p>现在清楚了吧？Git与远程仓库之间的交互是通过这个feature(T)进行过渡的。git push也是如此，在simple模式下，我们feature(L)分支的upstream其实指向的就是feature(T)，而feature(T)这个指针就会指向真正的远程分支feature(R)。所以如果我们的feature(L)有了改动，执行git push的话，Git会先把改动更新到feature(T)中，然后再讲feature(T)的改动推向远程的feature(R)中。由此才可以理解成：feature(T)就是feature(R)在本地的一个镜像。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>好了，关于git push&#x2F;git pull背后的分支的概念现在已经说的差不多了。这是以后讲解其它原理的基础，所以一定要放在前面说下，以后的文章里会更深入地讲解一些关键的原理，以帮助大家更加灵活地运用Git及解决问题。</p></li></ul><p>git  </p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/21/hello-world/"/>
    <url>/2023/04/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hello</tag>
      
      <tag>World</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
